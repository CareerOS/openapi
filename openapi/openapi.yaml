openapi: 3.1.0

info:
  title: CareerOS API
  description: |
    # Welcome to the CareerOS API

    The CareerOS API is a comprehensive, modern RESTful API platform designed for career development and student success.
    Our API-first architecture enables universities, career centers, and integration partners to build exceptional
    experiences for students, advisors, and employers.

    ## üöÄ Quick Start

    **New to CareerOS?** Get started in minutes:
    1. Review our [Getting Started Guide](./GETTING_STARTED.md)
    2. Authenticate using JWT tokens ([Authentication Guide](./AUTHENTICATION.md))
    3. Make your first API call to `/api/v1/users/self`
    4. Explore our comprehensive endpoint documentation below

    ## üìö API Organization

    ### Core API Versions
    - **Public API V1** (`/public/v1/*`) - Public endpoints for discovery and authentication (no auth required)
    - **API V1** (`/api/v1/*`) - Main authenticated API with 100+ endpoints for students and advisors
    - **API V2** (`/api/v2/*`) - Enhanced career advisor tools with advanced analytics
    - **Webhook API** (`/webhook/*`) - Real-time notifications from external services

    ### Feature Modules

    **Stable Modules:**
    - **Resume OS** - AI-powered resume building, scoring, and review workflow
    - **EventOS** - Career event discovery, registration, and calendar integration
    - **AlumniOS** - Alumni networking and mentorship connections
    - **Jobs & Companies** - Advanced search, tracking, and application management
    - **AI Features** - Intelligent job extraction and content analysis

    **BETA Modules** (Production-ready, evolving based on feedback):
    - **CalendarOS** - Complete appointment scheduling with confirmation and attendance tracking
    - **Agreements** - Three-way internship agreement management with electronic signatures
    - **Employers** - Employer registration, profile management, and team collaboration
    - **Custom Fields** - Institution-specific field definitions and dropdown management

    **PROPOSAL:**
    - **Reports API** - Comprehensive analytics with multi-format export (JSON, CSV, PDF)
      > üí° We're actively seeking partner feedback to refine reporting capabilities!

    ## üéØ Key Capabilities

    ### For Students
    - Search jobs, companies, and events
    - Build and score resumes with AI
    - Track applications and networking
    - Connect with alumni mentors
    - Schedule advisor appointments
    - Access personal progress reports

    ### For Career Advisors
    - View student progress across cohorts
    - AI-generated student summaries
    - Manage appointment scheduling
    - Access cohort-level analytics
    - Track engagement metrics
    - Export comprehensive reports

    ### For Administrators
    - Configure custom fields for all entities
    - Manage dropdown values
    - Oversee internship agreement workflows
    - Handle employer registration and onboarding
    - Access university-wide analytics

    ### For Integration Partners
    - API key authentication for server-to-server
    - Webhook support for real-time updates
    - ATS integrations (Greenhouse, Lever, Workday, Taleo)
    - Calendar integrations (Google, Outlook)

    ## üîê Authentication

    CareerOS supports multiple authentication methods:
    - **JWT Bearer Tokens** (Auth0) - For student and advisor applications
    - **API Keys** - For integration partners and webhooks

    See our [Authentication Guide](./AUTHENTICATION.md) for detailed implementation.

    ## üìñ Documentation Resources

    - **[Getting Started Guide](./GETTING_STARTED.md)** - Step-by-step onboarding with code examples
    - **[Authentication Guide](./AUTHENTICATION.md)** - Security, tokens, and best practices
    - **[API Improvements Summary](./API_IMPROVEMENTS_SUMMARY.md)** - Why CareerOS stands out
    - **OpenAPI Specification** - Complete machine-readable API documentation (this document)

    ## üí¨ BETA Features & Feedback

    Several advanced features are in **BETA** status. These are fully functional and production-ready,
    but may evolve based on partner feedback:

    - **CalendarOS** - Appointment scheduling and calendar management
    - **Agreements API** - Internship agreement workflow
    - **Employers API** - Employer onboarding and management
    - **Custom Fields API** - Institution-specific extensions

    **We welcome your feedback!**
    - Technical feedback: api-feedback@thecareeros.com
    - Feature requests: product@thecareeros.com
    - Integration support: api-support@thecareeros.com

    ## üåü What Makes CareerOS Different

    ‚úÖ **Comprehensive** - 100+ endpoints covering the complete career development lifecycle
    ‚úÖ **Modern** - Built on OpenAPI 3.1.0 with industry-standard practices
    ‚úÖ **Intelligent** - AI-powered resume scoring, job extraction, and student insights
    ‚úÖ **Flexible** - Custom fields and dropdown values for institution-specific needs
    ‚úÖ **Integrated** - ATS and calendar integrations out of the box
    ‚úÖ **Developer-Friendly** - Extensive documentation, code examples, and responsive support
    ‚úÖ **Production-Ready** - Stable API with clear versioning and deprecation policies

    ## üìä API Statistics

    - **100+ Total Endpoints**
    - **9 Feature Modules** (5 stable, 4 BETA, 1 proposal)
    - **Multi-Format Exports** (JSON, CSV, PDF)
    - **Real-Time Capabilities** (WebSockets, Webhooks)
    - **Enterprise Integrations** (ATS, Calendar, SSO)

    ## üö¶ Rate Limits

    | Endpoint Type | Rate Limit | Window |
    |---------------|------------|--------|
    | Public API | 100 requests | 1 minute |
    | Authenticated API | 300 requests | 1 minute |
    | Search Endpoints | 60 requests | 1 minute |
    | Advisor V2 API | 500 requests | 1 minute |

    ## üîó Learn More

    - **Website**: [https://thecareeros.com](https://thecareeros.com)
    - **API Support**: api-support@thecareeros.com
    - **Status Page**: https://status.thecareeros.com
    - **API Feedback**: api-feedback@thecareeros.com

    ---

    **Ready to build something great?** Start with our [Getting Started Guide](./GETTING_STARTED.md)
    and make your first API call today! üöÄ

  contact:
    name: CareerOS API Support
    email: api-support@thecareeros.com
    url: https://thecareeros.com
  version: 2.0.0
  license:
    name: CareerOS internal usage license
    url: https://github.com/CareerOS/openapi/blob/main/LICENSE_TCOS

servers:
  - url: https://api.thecareeros.com
    description: Production server
  - url: https://api-dev.thecareeros.com
    description: Development server

tags:
  - name: Public
    description: Public endpoints (no authentication required)
  - name: Users
    description: User profile and account management
  - name: Companies
    description: Company search, profiles, and management
  - name: Jobs
    description: Job search, saved jobs, and applications
  - name: Contacts
    description: Professional contacts and networking
  - name: Applications
    description: Job application tracking and management
  - name: Resume
    description: Resume creation, editing, and management (Resume OS module)
  - name: Events
    description: |
      Event discovery, registration, and management (EventOS module).

      EventOS provides comprehensive event management including career fairs,
      networking events, workshops, and employer presentations. Features include
      event search, registration, speaker information, and calendar integration.
  - name: Universities
    description: University and cohort management
  - name: Alumni
    description: |
      Alumni networking and directory (AlumniOS module).

      AlumniOS connects current students with successful alumni for mentorship,
      networking, and career guidance. Search alumni by cohort, university, or
      industry to build valuable professional connections.
  - name: Advisor
    description: Career advisor-specific endpoints
  - name: AI
    description: AI-powered features and insights
  - name: Webhooks
    description: Webhook endpoints for external services
  - name: Reports (PROPOSAL)
    description: |
      **[PROPOSAL]** Comprehensive reporting and analytics endpoints.

      Unified reporting API providing student activity reports, progress tracking,
      and cohort-level analytics. Supports multiple export formats (JSON, CSV, PDF)
      for integration with institutional systems and stakeholder reporting.
  - name: CalendarOS (BETA)
    description: |
      **[BETA]** Appointment scheduling and calendar management (CalendarOS module).

      CalendarOS provides a complete appointment booking workflow including availability
      checking, appointment creation, confirmation, attendance tracking, and calendar
      management. Supports both student-initiated and advisor-initiated scheduling with
      email confirmations, meeting platform integration, and comprehensive scheduling analytics.
  - name: Agreements (BETA)
    description: |
      **[BETA]** Three-way internship agreement management system.

      Comprehensive workflow for creating, signing, and managing internship agreements between
      students, employers, and universities. Features include electronic signatures from all
      three parties, agreement modification with signature reset, notification system for all
      parties, complete audit trail, and document management. Supports the full lifecycle from
      draft creation through execution and completion.
  - name: Employers (BETA)
    description: |
      **[BETA]** Employer registration and organization management.

      Complete employer onboarding and management system including organization registration,
      profile management, multi-user access control, and account settings. Enables employers to
      register their organization, add team members with role-based permissions, manage company
      branding and public profile, configure notification preferences, and set up integrations
      with ATS and calendar systems. Supports the full employer lifecycle from initial registration
      through ongoing account management.
  - name: Custom Fields (BETA)
    description: |
      **[BETA]** Flexible custom field system with optional metadata management.

      **How It Works:**
      All major entities (students, jobs, companies, applications, events, contacts, agreements, employers,
      appointments, resumes, alumni) support arbitrary custom fields out of the box. Simply include any
      key-value pair in your API requests and they will be automatically stored and returned in the
      `custom_fields` object. No pre-definition required!

      **Example - Just Works:**
      ```json
      POST /api/v1/users/self/profile
      {
        "first_name": "Maria",
        "last_name": "Garcia",
        "esade_program_track": "mba_fulltime",
        "preferred_industry": "consulting"
      }
      ```

      **Optional Metadata API:**
      The Custom Fields API endpoints (`/api/v1/custom-fields/*`) are **optional** and provide metadata
      management for UI display labels, validation rules, and visibility controls. Use these
      endpoints when you need structured definitions for forms, but skip them if you just want to store
      arbitrary data.

paths:
  # ==========================================
  # WEBHOOK API (API Key Protected)
  # ==========================================
  /webhook/documents/scan-results:
    $ref: paths/webhooks/documents_scan_results.yaml

  # ==========================================
  # PUBLIC API V1
  # ==========================================

  # Login Flow
  /public/v1/universities:
    $ref: paths/public/universities.yaml
  /public/v1/universities/{universityID}/providers:
    $ref: paths/public/universities_{universityID}_providers.yaml
  /public/v1/universities/{universityID}/providers/{providerName}:
    $ref: paths/public/universities_{universityID}_providers_{providerName}.yaml


  # ==========================================
  # API V1 - Main Application API
  # ==========================================

  # User Management
  /api/v1/users/self:
    $ref: paths/users/self.yaml
  /api/v1/users/self/profile:
    $ref: paths/users/self_profile.yaml
  /api/v1/users/self/appointments:
    $ref: paths/users/self_appointments.yaml
  /api/v1/users/self/reports/activity:
    $ref: paths/users/self_reports_activity.yaml
  /api/v1/users/self/reports/progress:
    $ref: paths/users/self_reports_progress.yaml

  # Companies
  /api/v1/companies:
    $ref: paths/companies/index.yaml
  /api/v1/companies/issaved:
    $ref: paths/companies/issaved.yaml
  /api/v1/companies/{id}:
    $ref: paths/companies/by_id.yaml
  /api/v1/companies/{id}/profile:
    $ref: paths/companies/profile.yaml
  /api/v1/companies/search/{name}:
    $ref: paths/companies/search_by_name.yaml
  /api/v1/companies/explore:
    $ref: paths/companies/explore.yaml
  /api/v1/companies/top-saved:
    $ref: paths/companies/top_saved.yaml
  /api/v1/companies/locations:
    $ref: paths/companies/locations.yaml
  /api/v1/companies/sizes:
    $ref: paths/companies/sizes.yaml
  /api/v1/companies/tags:
    $ref: paths/companies/tags.yaml

  # Jobs
  /api/v1/jobs:
    $ref: paths/jobs/index.yaml
  /api/v1/jobs/{id}:
    $ref: paths/jobs/by_id.yaml
  /api/v1/jobs/issaved:
    $ref: paths/jobs/issaved.yaml
  /api/v1/jobs/search:
    $ref: paths/jobs/search.yaml
  /api/v1/jobs/savedfilters:
    $ref: paths/jobs/saved_filters.yaml

  # Contacts
  /api/v1/contacts:
    $ref: paths/contacts/index.yaml
  /api/v1/contacts/issaved:
    $ref: paths/contacts/issaved.yaml
  /api/v1/contacts/{id}:
    $ref: paths/contacts/by_id.yaml
  /api/v1/contacts/{id}/email:
    $ref: paths/contacts/by_id_email.yaml
  /api/v1/contacts/{id}/chat:
    $ref: paths/contacts/by_chat.yaml
  /api/v1/contacts/bycompany/{id}:
    $ref: paths/contacts/bycompany_id.yaml
  /api/v1/contacts/bystatus/{status}:
    $ref: paths/contacts/bystatus.yaml

  # Applications
  /api/v1/applications:
    $ref: paths/applications/index.yaml

  # Resume OS
  /api/v1/resume/base:
    $ref: paths/resumes/base_list.yaml
  /api/v1/resume/base/empty:
    $ref: paths/resumes/base_empty.yaml
  /api/v1/resume/base/copy:
    $ref: paths/resumes/base_copy.yaml
  /api/v1/resume/base/{baseResumeID}:
    $ref: paths/resumes/base_{resumeID}.yaml
  /api/v1/resume/base/{id}/content:
    $ref: paths/resumes/base_content.yaml
  /api/v1/resume/base/{id}/status:
    $ref: paths/resumes/base_status.yaml
  /api/v1/resume/templates:
    $ref: paths/resumes/templates.yaml
  /api/v1/resume/templates/{templateID}:
    $ref: paths/resumes/templates_{templateID}.yaml
  /api/v1/resume/score/action-verbs:
    $ref: paths/resumes/action_verbs.yaml
  /api/v1/resume/score/{baseResumeID}:
    $ref: paths/resumes/score_get.yaml
  /api/v1/resume/review:
    $ref: paths/resumes/review_request.yaml
  /api/v1/resume/review/counts:
    $ref: paths/resumes/review_counts.yaml

  # Events (Students)
  /api/v1/events/search:
    $ref: paths/events/search.yaml
  /api/v1/events/{eventId}:
    $ref: paths/events/by_id.yaml
  /api/v1/events/{eventId}/apply:
    $ref: paths/events/apply.yaml
  /api/v1/events/{eventId}/cancel:
    $ref: paths/events/cancel.yaml
  /api/v1/events/{eventId}/speakers:
    $ref: paths/events/speakers.yaml
  /api/v1/events/{eventId}/download-ics:
    $ref: paths/events/download_ics.yaml

  # AI Features
  /api/v1/ai/job-extraction:
    $ref: paths/ai/job_extraction.yaml

  # University & Cohorts
  /api/v1/users/self/university:
    $ref: paths/universities/self_university.yaml
  /api/v1/university/{universityID}/cohorts:
    $ref: paths/universities/cohorts_by_university_id.yaml

  # Alumni
  /api/v1/alumn/cohort/{cohortID}:
    $ref: paths/alumni/by_cohort.yaml
  /api/v1/alumn/university/{universityID}:
    $ref: paths/alumni/by_university.yaml
  /api/v1/alumn/{id}:
    $ref: paths/alumni/by_id.yaml

  # ==========================================
  # REPORTS API (PROPOSAL)
  # ==========================================

  /api/v1/reports/student/activity:
    $ref: paths/reports/student_activity.yaml
  /api/v1/reports/student/progress:
    $ref: paths/reports/student_progress.yaml
  /api/v1/reports/cohort:
    $ref: paths/reports/cohort.yaml

  # Report Jobs - Saved report configurations
  /api/v1/reports/jobs:
    $ref: paths/reports/jobs_index.yaml
  /api/v1/reports/jobs/{id}:
    $ref: paths/reports/jobs_by_id.yaml
  /api/v1/reports/jobs/{id}/run:
    $ref: paths/reports/jobs_by_id_run.yaml
  /api/v1/reports/jobs/{id}/runs:
    $ref: paths/reports/jobs_by_id_runs.yaml
  /api/v1/reports/jobs/{id}/runs/{run_id}:
    $ref: paths/reports/jobs_by_id_runs_by_run_id.yaml
  /api/v1/reports/jobs/{id}/runs/{run_id}/results:
    $ref: paths/reports/jobs_by_id_runs_by_run_id_results.yaml

  # ==========================================
  # APPOINTMENTS API (BETA) - CalendarOS
  # ==========================================

  /api/v1/appointments:
    $ref: paths/appointments/index.yaml
  /api/v1/appointments/{id}:
    $ref: paths/appointments/by_id.yaml
  /api/v1/appointments/{id}/confirm:
    $ref: paths/appointments/confirm.yaml
  /api/v1/appointments/{id}/mark-attendance:
    $ref: paths/appointments/mark_attendance.yaml
  /api/v1/appointments/availability:
    $ref: paths/appointments/availability.yaml

  # ==========================================
  # INTERNSHIP AGREEMENTS API (BETA)
  # ==========================================

  /api/v1/agreements/internship:
    $ref: paths/agreements/internship_index.yaml
  /api/v1/agreements/internship/{id}:
    $ref: paths/agreements/internship_by_id.yaml
  /api/v1/agreements/internship/{id}/sign:
    $ref: paths/agreements/internship_sign.yaml
  /api/v1/agreements/internship/{id}/notify:
    $ref: paths/agreements/internship_notify.yaml
  /api/v1/agreements/internship/{id}/signatures:
    $ref: paths/agreements/internship_signatures.yaml

  # ==========================================
  # EMPLOYERS API (BETA)
  # ==========================================

  /api/v1/employers/register:
    $ref: paths/employers/register.yaml
  /api/v1/employers/profile:
    $ref: paths/employers/profile.yaml
  /api/v1/employers/users:
    $ref: paths/employers/users.yaml
  /api/v1/employers/users/{user_id}:
    $ref: paths/employers/users_by_id.yaml
  /api/v1/employers/settings:
    $ref: paths/employers/settings.yaml

  # ==========================================
  # CUSTOM FIELDS API (BETA)
  # ==========================================

  /api/v1/custom-fields:
    $ref: paths/custom_fields/index.yaml
  /api/v1/custom-fields/{id}:
    $ref: paths/custom_fields/by_id.yaml

  # ==========================================
  # API V2 - Career Advisor Application
  # ==========================================

  /api/v2/university/students:
    $ref: paths/advisor_v2/students.yaml
  /api/v2/university/students/{id}/summary:
    $ref: paths/advisor_v2/student_summary.yaml
  /api/v2/university/students/{id}/contacts:
    $ref: paths/advisor_v2/student_contacts.yaml
  /api/v2/university/student/{id}/notes:
    $ref: paths/advisor_v2/student_notes.yaml
  /api/v2/university/analytics/networking:
    $ref: paths/advisor_v2/analytics_networking.yaml
  /api/v2/university/analytics/companies/top:
    $ref: paths/advisor_v2/analytics_companies.yaml
  /api/v2/university/advisors/with-cohorts:
    $ref: paths/advisor_v2/advisors_cohorts.yaml
  /api/v2/advisor/reports/cohort:
    $ref: paths/advisor_v2/reports_cohort.yaml
  /api/v2/applications:
    $ref: paths/applications/v2_get.yaml

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Auth0 JWT token authentication

    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for integration partners

  responses:
    UnauthorizedError:
      description: Failed to validate JWT token
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                enum:
                  - Failed to validate JWT token
                description: JWT token validation failed (expired, invalid, etc.)
            required:
              - error

    ForbiddenError:
      description: User does not have permission to access this resource
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Forbidden
              message:
                type: string
                example: Insufficient permissions

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Not found
              message:
                type: string
                example: The requested resource was not found

    ValidationError:
      description: Request validation failed
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Validation failed
              message:
                type: string
                example: One or more fields are invalid
              details:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                    message:
                      type: string

  parameters:
    UserIDPath:
      name: userID
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: User ID

    CompanyIDPath:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Company ID

    JobIDPath:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Job ID

    ContactIDPath:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Contact ID

    EventIDPath:
      name: eventId
      in: path
      required: true
      description: Unique identifier for the event
      schema:
        type: string
        format: uuid

    UniversityIDPath:
      name: universityID
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: University ID

    Limit:
      name: limit
      in: query
      description: Maximum number of results to return
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20

    Offset:
      name: offset
      in: query
      description: Number of results to skip (for pagination)
      schema:
        type: integer
        minimum: 0
        default: 0

security:
  - BearerAuth: []
