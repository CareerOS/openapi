openapi: 3.1.0
info:
  title: CareerOS API
  description: |
    CareerOS API documentation for the career development platform.

    ## API Versions
    - **Public API V1**: Public endpoints for company, job, and event discovery
    - **API V1**: Main authenticated API for students and career advisors
    - **API V2**: Career Advisor application endpoints
    - **Webhook API**: Endpoints for receiving webhooks from external services

    [Learn more about CareerOS](https://thecareeros.com)
  contact:
    name: CareerOS API Support
    url: https://thecareeros.com
  version: 2.0.0
  license:
    name: CareerOS internal usage license
    url: https://github.com/CareerOS/openapi/blob/main/LICENSE_TCOS
servers:
  - url: https://api.thecareeros.com
    description: Production server
  - url: https://api-dev.thecareeros.com
    description: Development server
security:
  - BearerAuth: []
tags:
  - name: Public
    description: Public endpoints (no authentication required)
  - name: Users
    description: User profile and account management
  - name: Companies
    description: Company search, profiles, and management
  - name: Jobs
    description: Job search, saved jobs, and applications
  - name: Contacts
    description: Professional contacts and networking
  - name: Applications
    description: Job application tracking and management
  - name: Resume
    description: Resume creation, editing, and management (Resume OS module)
  - name: Events
    description: Event discovery, registration, and management
  - name: Universities
    description: University and cohort management
  - name: Advisor
    description: Career advisor-specific endpoints
  - name: AI
    description: AI-powered features and insights
  - name: Webhooks
    description: Webhook endpoints for external services
paths:
  /webhook/documents/scan-results:
    post:
      tags:
        - Webhooks
      summary: Receive document scan results
      description: Webhook endpoint to receive scan results from document scanning service
      operationId: handleDocumentScanResult
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - document_id
                - status
              properties:
                document_id:
                  type: string
                  format: uuid
                  description: ID of the scanned document
                status:
                  type: string
                  enum:
                    - clean
                    - infected
                    - error
                  description: Scan result status
                threat_details:
                  type: object
                  description: Details if threats were found
                  properties:
                    threats:
                      type: array
                      items:
                        type: string
                    severity:
                      type: string
                      enum:
                        - low
                        - medium
                        - high
                        - critical
      responses:
        '200':
          description: Webhook processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  received:
                    type: boolean
                    example: true
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /public/v1/universities:
    get:
      tags:
        - Public
        - Universities
      summary: Get universities
      description: Get all enrolled universities
      operationId: getUniversities
      security: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    name:
                      type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /public/v1/universities/{universityID}/providers:
    get:
      tags:
        - Public
        - Providers
      summary: Get providers supported by the university
      description: Get providers supported by the university
      operationId: getUniversityProviders
      security: []
      parameters:
        - in: path
          name: universityID
          description: ID of the university
          required: true
          schema:
            type: string
            format: uuid
            example: 482ecaf0-e532-4285-85a1-3f22cb86d25f
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /public/v1/universities/{universityID}/providers/{providerName}:
    get:
      tags:
        - Public
        - Providers
      summary: Get supported domain list for selected university login provider
      description: Get supported domain list for selected university login provider
      operationId: getUniversityProviderDomains
      security: []
      parameters:
        - in: path
          name: universityID
          description: ID of the university
          required: true
          schema:
            type: string
            format: uuid
            example: 5154fae1-5c0b-470e-90d8-3f7c399ca502
        - in: path
          name: providerName
          description: Name of the supported provider
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/users/self:
    get:
      tags:
        - Users
      summary: Get self user info
      description: Returns a self user info
      operationId: getSelfUserInfo
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/users/self/profile:
    get:
      tags:
        - Users
      summary: Get user profile
      description: Retrieve the authenticated user's profile information
      operationId: getUserProfile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      tags:
        - Users
      summary: Update user profile
      description: Update the authenticated user's profile information
      operationId: updateUserProfile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    patch:
      tags:
        - Users
      summary: Partially update user profile
      description: Update specific fields of the authenticated user's profile
      operationId: patchUserProfile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                headline:
                  type: string
                bio:
                  type: string
                location:
                  type: string
                linkedin_url:
                  type: string
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /api/v1/companies:
    get:
      tags:
        - Companies
      summary: Get companies
      description: Returns companies
      operationId: getCompanies
      parameters:
        - name: page
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
          description: Page number for pagination
        - name: industry
          in: query
          schema:
            type: string
          description: Filter by industry
        - name: category
          in: query
          schema:
            type: string
          description: Filter by category
        - name: tag
          in: query
          schema:
            type: string
          description: Filter by tag
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Company'
        '400':
          description: Bad request - Invalid page or parameter format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Companies
      summary: Save Company
      description: Saving Company to DB & current user's favorite companies
      operationId: saveCompany
      requestBody:
        description: Company data required to save to DB
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Company'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  companyID:
                    type: string
        '400':
          $ref: '#/components/responses/JSONValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/companies/issaved:
    post:
      tags:
        - Companies
      summary: Validate company
      description: |
        Endpoint checks if the company exists in the CareerOS database and is it saved by the user.

        Matching rules:
            - company is checked by name and slug

        The endpoint is used exclusively by the browser extension.
      operationId: validateCompany
      requestBody:
        description: LinkedIn identifiers of the company to be validated against (name and slug)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanySearchFields'
      responses:
        '200':
          description: Company can be saved - it exists in the database and is not saved by the user yet
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    enum:
                      - Company can be saved
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Company not found - we don't have this company in our database
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    enum:
                      - Company does not exist in the database
        '409':
          description: Conflict - user already saved this company
          content:
            application/json:
              schema:
                type: object
                properties:
                  company_id:
                    type: string
                    format: uuid
                    description: ID of the company
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/companies/{id}:
    get:
      tags:
        - Companies
      summary: Get Company by ID
      description: Get Company with Jobs by company_id
      operationId: getCompanyById
      parameters:
        - name: id
          in: path
          description: Company ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyWithJobs'
        '400':
          $ref: '#/components/responses/IDValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/companies/{id}/profile:
    get:
      tags:
        - Companies
      summary: Get company profile
      description: Retrieve detailed company profile with additional information
      operationId: getCompanyProfile
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/CompanyIDPath'
      responses:
        '200':
          description: Company profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  name:
                    type: string
                  logo_url:
                    type: string
                    format: uri
                  cover_image_url:
                    type: string
                    format: uri
                  overview:
                    type: string
                  industry:
                    type: string
                  company_size:
                    type: string
                  founded_year:
                    type: integer
                  headquarters:
                    type: string
                  website_url:
                    type: string
                    format: uri
                  linkedin_url:
                    type: string
                    format: uri
                  culture:
                    type: object
                    properties:
                      description:
                        type: string
                      values:
                        type: array
                        items:
                          type: string
                  office_locations:
                    type: array
                    items:
                      type: object
                      properties:
                        city:
                          type: string
                        country:
                          type: string
                        address:
                          type: string
                  media:
                    type: array
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          enum:
                            - image
                            - video
                        url:
                          type: string
                  testimonials:
                    type: array
                    items:
                      type: object
                      properties:
                        author:
                          type: string
                        role:
                          type: string
                        content:
                          type: string
                  events:
                    type: array
                    items:
                      type: object
                      description: Upcoming events hosted by the company
                  jobs_count:
                    type: integer
                    description: Number of active job postings
                  is_saved:
                    type: boolean
                    description: Whether user has saved this company
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/v1/companies/search/{name}:
    get:
      tags:
        - Companies
      summary: Get companies by name
      description: Search companies by name
      operationId: searchCompaniesByName
      parameters:
        - name: name
          in: path
          description: Company name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Company'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/companies/explore:
    get:
      tags:
        - Companies
      summary: Explore companies
      description: Get curated companies organized by categories for exploration
      operationId: getExploreCompanies
      security:
        - BearerAuth: []
      parameters:
        - name: industry
          in: query
          description: Filter by industry
          schema:
            type: string
        - name: size
          in: query
          description: Filter by company size
          schema:
            type: string
        - name: tags
          in: query
          description: Filter by tags (comma-separated)
          schema:
            type: string
      responses:
        '200':
          description: Companies retrieved successfully
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items:
                    $ref: '#/components/schemas/Company'
                description: Companies organized by category (e.g., "Top Startups", "Fortune 500", "Trending")
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /api/v1/companies/top-saved:
    get:
      tags:
        - Companies
      summary: Get top saved companies
      description: Retrieve most saved companies across the platform
      operationId: getTopSavedCompanies
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Top saved companies retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    company:
                      $ref: '#/components/schemas/Company'
                    saves_count:
                      type: integer
                      description: Number of students who saved this company
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /api/v1/companies/locations:
    get:
      tags:
        - Companies
      summary: Get company locations
      description: Retrieve list of available company locations for filtering
      operationId: getCompanyLocations
      security:
        - BearerAuth: []
      parameters:
        - name: company_id
          in: query
          description: Get locations for a specific company
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Locations retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    city:
                      type: string
                    country:
                      type: string
                    region:
                      type: string
                    company_count:
                      type: integer
                      description: Number of companies in this location (if not company-specific)
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /api/v1/companies/sizes:
    get:
      tags:
        - Companies
      summary: Get company sizes
      description: Retrieve list of available company size categories
      operationId: getCompanySizes
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Company sizes retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example:
                  - 1-10
                  - 11-50
                  - 51-200
                  - 201-500
                  - 501-1000
                  - 1001-5000
                  - 5000+
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /api/v1/companies/tags:
    get:
      tags:
        - Companies
      summary: Get company tags
      description: Retrieve list of available company tags for filtering
      operationId: getCompanyTags
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Company tags retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example:
                  - startup
                  - fortune-500
                  - remote-first
                  - tech
                  - fintech
                  - sustainable
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /api/v1/jobs:
    get:
      tags:
        - Jobs
      summary: Get Jobs
      description: Get a list of jobs
      operationId: getJobs
      parameters:
        - name: limit
          in: query
          description: The maximum number of jobs to retrieve
          required: true
          schema:
            type: integer
            minimum: 1
        - name: offset
          in: query
          description: The offset for pagination
          required: true
          schema:
            type: integer
            minimum: 0
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Jobs
      summary: Save job
      description: Save a job to DB & for current user
      operationId: saveJob
      requestBody:
        description: Job's data from Chrome Extension
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobWithCompanyName'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/JSONValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Jobs
      summary: Delete a job
      description: Soft delete a job for the current user.
      operationId: deleteUserJob
      parameters:
        - name: id
          in: path
          description: ID of the job to be deleted.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Success
        '400':
          description: Bad request or Invalid ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/jobs/{id}:
    patch:
      tags:
        - Jobs
      summary: Update job
      description: The endpoint updates a piece of information about the job.
      operationId: updateJob
      parameters:
        - name: id
          in: path
          description: Job ID
          required: true
          schema:
            type: string
      requestBody:
        description: Job fields for updating.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobPatch'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: The request body or the job ID in the path has an incorrect format or is empty.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/IDValidationFailedError'
                  - $ref: '#/components/schemas/JSONValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/jobs/issaved:
    post:
      tags:
        - Jobs
      summary: Validate job
      description: |
        Endpoint checks if the company in which job is opened exists in the CareerOS database, and 
        that given job is not yet saved by the user for the given company.

        Matching rules:
         - company is checked by name and slug
         - job is checked by linkedin_url

        The endpoint is used exclusively by the browser extension.
      operationId: validateJob
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    company:
                      $ref: '#/components/schemas/CompanySearchFields'
                - type: object
                  properties:
                    job_linkedin_url:
                      type: string
                      description: LinkedIn URL of the job
                  required:
                    - company
                    - job_linkedin_url
      responses:
        '200':
          description: Job can be saved
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    enum:
                      - Job can be saved
        '400':
          $ref: '#/components/responses/JSONValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          description: Conflict - user already saved this job
          content:
            application/json:
              schema:
                type: object
                properties:
                  company_id:
                    type: string
                    format: uuid
                    description: ID of the matched company in which job is opened
                  job_id:
                    type: string
                    format: uuid
                    description: ID of the already saved job
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/jobs/search:
    get:
      tags:
        - Jobs
      summary: Search jobs
      description: Search for job postings with various filters
      operationId: searchJobs
      security:
        - BearerAuth: []
      parameters:
        - name: query
          in: query
          description: Search query string
          schema:
            type: string
          example: Software Engineer
        - name: location
          in: query
          description: Job location filter
          schema:
            type: string
          example: Berlin, Germany
        - name: industry
          in: query
          description: Industry filter
          schema:
            type: string
          example: Technology
        - name: job_type
          in: query
          description: Job type filter
          schema:
            type: string
            enum:
              - full-time
              - part-time
              - internship
              - contract
        - name: experience_level
          in: query
          description: Experience level filter
          schema:
            type: string
            enum:
              - entry
              - mid
              - senior
              - executive
        - name: remote
          in: query
          description: Filter for remote jobs
          schema:
            type: boolean
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
      responses:
        '200':
          description: Jobs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  jobs:
                    type: array
                    items:
                      $ref: '#/components/schemas/Job'
                  total:
                    type: integer
                    description: Total number of matching jobs
                  limit:
                    type: integer
                  offset:
                    type: integer
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /api/v1/jobs/savedfilters:
    get:
      tags:
        - Jobs
      summary: Get saved job filters
      description: Retrieve user's saved job search filters
      operationId: getUserSavedJobFilters
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Saved filters retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    name:
                      type: string
                    filters:
                      type: object
                      additionalProperties: true
                    created_at:
                      type: string
                      format: date-time
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - Jobs
      summary: Create saved job filter
      description: Save a job search filter for quick access
      operationId: createSavedJobFilter
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name for the saved filter
                filters:
                  type: object
                  description: Filter parameters
                  additionalProperties: true
      responses:
        '201':
          description: Filter saved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /api/v1/contacts:
    post:
      tags:
        - Contacts
      summary: Save contact
      description: Save a contact to DB & for current user
      operationId: saveContact
      requestBody:
        description: Contact's data from chrome extension
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contact'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  id:
                    type: string
                    format: uuid
        '400':
          $ref: '#/components/responses/JSONValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/contacts/issaved:
    post:
      tags:
        - Contacts
      summary: Validate contact
      description: |
        Endpoint checks if the company in which contact works currently exists in the CareerOS database, and 
        that given contact is not yet saved by the user for the given company.

        Matching rules:
         - company is checked by name and slug
         - contact is checked by linkedin_url

        The endpoint is used exclusively by the browser extension.
      operationId: validateContact
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    company:
                      $ref: '#/components/schemas/CompanySearchFields'
                - type: object
                  properties:
                    contact_linkedin_url:
                      type: string
                      description: LinkedIn URL of the contact
                  required:
                    - company
                    - contact_linkedin_url
      responses:
        '200':
          description: Contact can be saved
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      message:
                        type: string
                        enum:
                          - Contact can be saved
                      should_update:
                        type: boolean
                        description: Whether the contact data should be updated
                  - type: object
                    properties:
                      message:
                        type: string
                        enum:
                          - Already exists and saved by the user
                      company_id:
                        type: string
                        format: uuid
                        description: ID of the matched company in which contact works
                      contact_id:
                        type: string
                        format: uuid
                        description: ID of the already saved contact
                      should_update:
                        type: boolean
                        description: Whether the contact data should be updated
        '400':
          $ref: '#/components/responses/JSONValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/contacts/{id}:
    get:
      tags:
        - Contacts
      summary: Get contact by ID
      description: Get contact by ID
      operationId: getContactByID
      parameters:
        - name: id
          in: path
          description: Contact ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        '400':
          $ref: '#/components/responses/IDValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Contacts
      summary: Delete contact
      description: Delete a contact from DB & for current user by ID
      operationId: deleteContact
      parameters:
        - name: id
          in: path
          description: Contact ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The contact has been successfully removed from the database.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/IDValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/contacts/{id}/email:
    post:
      tags:
        - Contacts
      summary: Set emails by contactID
      description: Set emails by contactID
      operationId: setEmailsByContactID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the contact for whom to set emails
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                secondary_email:
                  type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message
        '400':
          description: Failed to parse ID as UUID or bind JSON body
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/IDValidationFailedError'
                  - $ref: '#/components/schemas/JSONValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/contacts/{id}/chat:
    get:
      tags:
        - Contacts
      summary: Get contact with chat info
      description: Retrieve contact details including chat/messaging information
      operationId: getContactWithChatID
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/ContactIDPath'
      responses:
        '200':
          description: Contact retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Contact'
                  - type: object
                    properties:
                      chat_id:
                        type: string
                        description: Chat channel ID for this contact
                      last_message_at:
                        type: string
                        format: date-time
                        nullable: true
                      unread_count:
                        type: integer
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/v1/contacts/bycompany/{id}:
    get:
      tags:
        - Contacts
      summary: Get contacts by company ID
      description: Returns all contacts that have relations with the given company
      operationId: getContactsByCompanyID
      parameters:
        - name: id
          in: path
          description: Company ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contact'
        '400':
          $ref: '#/components/responses/IDValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/contacts/bystatus/{status}:
    get:
      tags:
        - Contacts
      summary: Get contacts by Connection Status
      description: Returns all contacts that have the given connection status with the user
      operationId: getContactsByStatus
      parameters:
        - name: status
          in: path
          description: Connection Status
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contact'
        '400':
          $ref: '#/components/responses/IDValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/applications:
    get:
      tags:
        - Applications
      operationId: getApplications
      summary: Returns all applications
      description: Returns applications
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Application'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - Applications
      summary: Change Application Status
      operationId: changeApplicationStatus
      requestBody:
        description: Tile's data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tile'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
        '400':
          $ref: '#/components/responses/JSONValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/resume/base:
    get:
      tags:
        - Resume
      summary: Get base resumes
      description: Retrieve all base resumes for the authenticated user
      operationId: getBaseResumes
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          description: Filter by resume status
          schema:
            type: string
            enum:
              - draft
              - in_review
              - needs_revision
              - approved
              - published
      responses:
        '200':
          description: Resumes retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    title:
                      type: string
                    template_id:
                      type: string
                      format: uuid
                    template_name:
                      type: string
                    status:
                      type: string
                      enum:
                        - draft
                        - in_review
                        - needs_revision
                        - approved
                        - published
                    preview_url:
                      type: string
                      format: uri
                    created_at:
                      type: string
                      format: date-time
                    updated_at:
                      type: string
                      format: date-time
                    review:
                      type: object
                      nullable: true
                      properties:
                        reviewer_id:
                          type: string
                          format: uuid
                        reviewer_name:
                          type: string
                        status:
                          type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /api/v1/resume/base/empty:
    post:
      tags:
        - Resume
      summary: Create empty base resume
      description: Create a new empty base resume for the user
      operationId: createEmptyBaseResume
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - template_id
              properties:
                title:
                  type: string
                  example: Software Engineer Resume
                template_id:
                  type: string
                  format: uuid
                  description: ID of the resume template to use
      responses:
        '201':
          description: Resume created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  title:
                    type: string
                  template_id:
                    type: string
                    format: uuid
                  status:
                    type: string
                    enum:
                      - draft
                      - in_review
                      - approved
                      - published
                  created_at:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /api/v1/resume/base/copy:
    post:
      tags:
        - Resume
      summary: Copy base resume
      description: Create a copy of an existing base resume
      operationId: copyBaseResume
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - base_resume_id
              properties:
                base_resume_id:
                  type: string
                  format: uuid
                  description: ID of the resume to copy
                title:
                  type: string
                  description: Title for the new copy
      responses:
        '201':
          description: Resume copied successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  message:
                    type: string
                    example: Resume copied successfully
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/v1/resume/base/{baseResumeID}:
    get:
      tags:
        - Resumes
      summary: Get base resume by id
      description: Get base resume by id
      operationId: getBaseResumeById
      parameters:
        - name: baseResumeID
          in: path
          description: base resume id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/base_resume_response'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Resumes
      summary: Update base resume by id
      description: |
        This endpoint allows users to update an existing resume by providing the ID of the resume to be updated along with the new resume schema object.
        Upon successful update, the server responds with the updated resume resource.
      operationId: updateBaseResumeById
      parameters:
        - name: baseResumeID
          in: path
          description: base resume id
          required: true
          schema:
            type: string
            format: uuid
            example: 2437816f-ddec-4bf3-a649-6f13efc0aeb5
      requestBody:
        required: true
        description: Base resume object
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  format: uuid
                  example: 2437816f-ddec-4bf3-a649-6f13efc0aeb5
                resume:
                  $ref: '#/components/schemas/Resume'
                resume_template:
                  type: string
                  example: ESADE
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Tailored resume has been successfully updated
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Resumes
      summary: Delete base resume by id
      description: Delete base resume by id
      operationId: deleteBaseResumeById
      parameters:
        - name: baseResumeID
          in: path
          description: base resume id
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: No content
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/resume/base/{id}/content:
    patch:
      tags:
        - Resume
      summary: Update base resume content
      description: Update the content sections of a base resume
      operationId: updateBaseResumeContent
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Base resume ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                personal_info:
                  type: object
                  properties:
                    full_name:
                      type: string
                    email:
                      type: string
                      format: email
                    phone:
                      type: string
                    location:
                      type: string
                    linkedin_url:
                      type: string
                    website_url:
                      type: string
                summary:
                  type: string
                  description: Professional summary
                work_experience:
                  type: array
                  items:
                    type: object
                    properties:
                      company:
                        type: string
                      title:
                        type: string
                      location:
                        type: string
                      start_date:
                        type: string
                      end_date:
                        type: string
                        nullable: true
                      current:
                        type: boolean
                      description:
                        type: array
                        items:
                          type: string
                education:
                  type: array
                  items:
                    type: object
                    properties:
                      institution:
                        type: string
                      degree:
                        type: string
                      field_of_study:
                        type: string
                      start_date:
                        type: string
                      end_date:
                        type: string
                      gpa:
                        type: string
                        nullable: true
                skills:
                  type: array
                  items:
                    type: string
                languages:
                  type: array
                  items:
                    type: object
                    properties:
                      language:
                        type: string
                      proficiency:
                        type: string
                certifications:
                  type: array
                  items:
                    type: object
                    properties:
                      name:
                        type: string
                      issuer:
                        type: string
                      date:
                        type: string
                      url:
                        type: string
                        nullable: true
      responses:
        '200':
          description: Resume content updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  updated_at:
                    type: string
                    format: date-time
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/v1/resume/base/{id}/status:
    patch:
      tags:
        - Resume
      summary: Update base resume status
      description: Update the status of a base resume (e.g., submit for review, publish)
      operationId: updateBaseResumeStatus
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Base resume ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum:
                    - draft
                    - in_review
                    - needs_revision
                    - approved
                    - published
      responses:
        '200':
          description: Resume status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  status:
                    type: string
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/v1/resume/templates:
    get:
      tags:
        - Resumes
      summary: Get resume templates
      description: Get resume templates
      operationId: getResumeTemplates
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resume_template'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/resume/templates/{templateID}:
    get:
      tags:
        - Resumes
      summary: Get resume template by id
      description: Get resume template by id
      operationId: getResumeTemplateByID
      parameters:
        - name: templateID
          in: path
          description: templateID
          required: true
          schema:
            type: string
            format: uuid
            example: 2ad3189c-7f7c-4c63-b417-cc9db69f03bc
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resume_template'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/resume/score/action-verbs:
    get:
      tags:
        - Resume
      summary: Get action verbs
      description: Retrieve a list of recommended action verbs for resume writing
      operationId: getActionVerbs
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Action verbs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  action_verbs:
                    type: array
                    items:
                      type: string
                    description: List of recommended action verbs
                  avoided_verbs:
                    type: array
                    items:
                      type: string
                    description: List of verbs to avoid
                  categories:
                    type: object
                    additionalProperties:
                      type: array
                      items:
                        type: string
                    description: Action verbs organized by category (e.g., leadership, technical, communication)
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /api/v1/resume/score/{baseResumeID}:
    get:
      tags:
        - Resume
      summary: Get resume score
      description: Get the current score and analysis for a base resume
      operationId: getResumeScore
      security:
        - BearerAuth: []
      parameters:
        - name: baseResumeID
          in: path
          required: true
          description: Base resume ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Resume score retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  overall_score:
                    type: integer
                    minimum: 0
                    maximum: 100
                    description: Overall resume score
                  categories:
                    type: object
                    properties:
                      impact:
                        type: object
                        properties:
                          score:
                            type: integer
                          feedback:
                            type: array
                            items:
                              type: string
                      brevity:
                        type: object
                        properties:
                          score:
                            type: integer
                          feedback:
                            type: array
                            items:
                              type: string
                      style:
                        type: object
                        properties:
                          score:
                            type: integer
                          feedback:
                            type: array
                            items:
                              type: string
                      sections:
                        type: object
                        properties:
                          score:
                            type: integer
                          feedback:
                            type: array
                            items:
                              type: string
                  last_updated:
                    type: string
                    format: date-time
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    put:
      tags:
        - Resume
      summary: Calculate resume score
      description: Calculate and update the score for a base resume
      operationId: calculateResumeScore
      security:
        - BearerAuth: []
      parameters:
        - name: baseResumeID
          in: path
          required: true
          description: Base resume ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Resume score calculated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  overall_score:
                    type: integer
                  categories:
                    type: object
                  message:
                    type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/v1/resume/review:
    post:
      tags:
        - Resume
      summary: Request resume review
      description: Submit a base resume for review by a career advisor
      operationId: requestResumeReview
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - base_resume_id
              properties:
                base_resume_id:
                  type: string
                  format: uuid
                notes:
                  type: string
                  description: Optional notes or questions for the reviewer
      responses:
        '201':
          description: Review requested successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  review_id:
                    type: string
                    format: uuid
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          description: Resume already in review
  /api/v1/resume/review/counts:
    get:
      tags:
        - Resume
      summary: Get resume review counts
      description: Get statistics about resume reviews (for career advisors)
      operationId: getResumeReviewCounts
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Review counts retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  pending:
                    type: integer
                    description: Number of resumes pending review
                  in_review:
                    type: integer
                    description: Number of resumes currently being reviewed
                  completed:
                    type: integer
                    description: Number of completed reviews
                  my_assignments:
                    type: integer
                    description: Number of reviews assigned to me
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /api/v1/events/search:
    get:
      tags:
        - Events
      summary: Search events
      description: Search for events with various filters
      operationId: searchEventsStudents
      security:
        - BearerAuth: []
      parameters:
        - name: query
          in: query
          description: Search query string
          schema:
            type: string
        - name: type
          in: query
          description: Event type filter
          schema:
            type: string
            enum:
              - workshop
              - networking
              - career_fair
              - webinar
              - company_presentation
        - name: date_from
          in: query
          description: Start date filter (ISO 8601)
          schema:
            type: string
            format: date
        - name: date_to
          in: query
          description: End date filter (ISO 8601)
          schema:
            type: string
            format: date
        - name: status
          in: query
          description: Event status filter
          schema:
            type: string
            enum:
              - upcoming
              - ongoing
              - past
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
      responses:
        '200':
          description: Events retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  events:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        title:
                          type: string
                        description:
                          type: string
                        type:
                          type: string
                        start_time:
                          type: string
                          format: date-time
                        end_time:
                          type: string
                          format: date-time
                        location:
                          type: string
                        is_virtual:
                          type: boolean
                        max_participants:
                          type: integer
                        registered_count:
                          type: integer
                        organizer:
                          type: object
                          properties:
                            name:
                              type: string
                            logo_url:
                              type: string
                  total:
                    type: integer
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /api/v1/events/{eventId}:
    get:
      tags:
        - Events
      summary: Get event details
      description: Retrieve detailed information about a specific event
      operationId: getEvent
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/EventIDPath'
      responses:
        '200':
          description: Event details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  title:
                    type: string
                  description:
                    type: string
                  type:
                    type: string
                  start_time:
                    type: string
                    format: date-time
                  end_time:
                    type: string
                    format: date-time
                  location:
                    type: string
                  is_virtual:
                    type: boolean
                  virtual_link:
                    type: string
                    format: uri
                  max_participants:
                    type: integer
                  registered_count:
                    type: integer
                  waitlist_count:
                    type: integer
                  organizer:
                    type: object
                  speakers:
                    type: array
                    items:
                      type: object
                  questions:
                    type: array
                    items:
                      type: object
                  user_registration_status:
                    type: string
                    enum:
                      - not_registered
                      - registered
                      - waitlisted
                      - attended
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/v1/events/{eventId}/apply:
    post:
      tags:
        - Events
      summary: Apply to event
      description: Register for an event
      operationId: applyToEvent
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/EventIDPath'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                answers:
                  type: array
                  description: Answers to event registration questions
                  items:
                    type: object
                    properties:
                      question_id:
                        type: string
                        format: uuid
                      answer:
                        type: string
      responses:
        '201':
          description: Successfully registered for event
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - registered
                      - waitlisted
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          description: Already registered for this event
  /api/v1/events/{eventId}/cancel:
    post:
      tags:
        - Events
      summary: Cancel event participation
      description: Cancel the user's registration for an event
      operationId: cancelEventParticipation
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/EventIDPath'
      responses:
        '200':
          description: Participation cancelled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          description: Not registered for this event or cannot cancel
  /api/v1/events/{eventId}/speakers:
    get:
      tags:
        - Events
      summary: Get event speakers
      description: Retrieve speakers for a specific event
      operationId: getEventSpeakers
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/EventIDPath'
      responses:
        '200':
          description: Speakers retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    name:
                      type: string
                    title:
                      type: string
                    company:
                      type: string
                    bio:
                      type: string
                    profile_picture_url:
                      type: string
                      format: uri
                    linkedin_url:
                      type: string
                      format: uri
                    is_saved:
                      type: boolean
                      description: Whether user has saved this speaker as a contact
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/v1/events/{eventId}/download-ics:
    get:
      tags:
        - Events
      summary: Download event ICS file
      description: Download calendar file (.ics) for the event
      operationId: downloadEventICS
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/EventIDPath'
      responses:
        '200':
          description: ICS file generated successfully
          content:
            text/calendar:
              schema:
                type: string
                format: binary
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/v1/ai/job-extraction:
    post:
      tags:
        - AI
      summary: Extract job details from URL
      description: Extract and parse job details from a job posting URL using AI
      operationId: extractJobFromURL
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - url
              properties:
                url:
                  type: string
                  format: uri
                  description: URL of the job posting
                  example: https://www.linkedin.com/jobs/view/1234567890
      responses:
        '200':
          description: Job details extracted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  title:
                    type: string
                  company:
                    type: string
                  location:
                    type: string
                  description:
                    type: string
                  requirements:
                    type: array
                    items:
                      type: string
                  benefits:
                    type: array
                    items:
                      type: string
                  salary_range:
                    type: object
                    properties:
                      min:
                        type: number
                      max:
                        type: number
                      currency:
                        type: string
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '422':
          description: Unable to extract job details from URL
  /api/v1/users/self/university:
    get:
      tags:
        - Universities
      summary: Get self university
      description: Get the university object associated with the authenticated user
      operationId: getSelfUniversity
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  domain:
                    type: string
                  created_at:
                    type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/university/{universityID}/cohorts:
    get:
      tags:
        - Universities
      summary: Get cohorts by university ID
      description: Get cohorts associated with a specific university
      operationId: getCohortByUniversityID
      parameters:
        - in: path
          name: universityID
          description: ID of the university
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '400':
          $ref: '#/components/responses/IDValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/alumn/cohort/{cohortID}:
    get:
      tags:
        - Universities
      summary: Get alumni by cohort
      description: Retrieve alumni profiles for a specific cohort
      operationId: getAlumniByCohortID
      security:
        - BearerAuth: []
      parameters:
        - name: cohortID
          in: path
          required: true
          description: Cohort ID
          schema:
            type: string
            format: uuid
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
      responses:
        '200':
          description: Alumni retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  alumni:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        name:
                          type: string
                        profile_picture:
                          type: string
                          format: uri
                        current_company:
                          type: string
                        current_title:
                          type: string
                        linkedin_url:
                          type: string
                          format: uri
                        graduation_year:
                          type: integer
                        tags:
                          type: array
                          items:
                            type: string
                  total:
                    type: integer
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/v1/alumn/university/{universityID}:
    get:
      tags:
        - Universities
      summary: Get alumni by university
      description: Retrieve all alumni profiles for a specific university
      operationId: getAlumniByUniversityID
      security:
        - BearerAuth: []
      parameters:
        - name: universityID
          in: path
          required: true
          description: University ID
          schema:
            type: string
            format: uuid
        - name: company
          in: query
          description: Filter by current company
          schema:
            type: string
        - name: industry
          in: query
          description: Filter by industry
          schema:
            type: string
        - name: graduation_year
          in: query
          description: Filter by graduation year
          schema:
            type: integer
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
      responses:
        '200':
          description: Alumni retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  alumni:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                        name:
                          type: string
                        profile_picture:
                          type: string
                          format: uri
                        current_company:
                          type: string
                        current_title:
                          type: string
                        linkedin_url:
                          type: string
                          format: uri
                        graduation_year:
                          type: integer
                        cohort_name:
                          type: string
                        tags:
                          type: array
                          items:
                            type: string
                  total:
                    type: integer
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/v1/alumn/{id}:
    get:
      tags:
        - Universities
      summary: Get alumni by ID
      description: Retrieve detailed profile information for a specific alumni
      operationId: getAlumByID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Alumni ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Alumni profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  name:
                    type: string
                  email:
                    type: string
                    format: email
                  profile_picture:
                    type: string
                    format: uri
                  bio:
                    type: string
                  linkedin_url:
                    type: string
                    format: uri
                  graduation_year:
                    type: integer
                  cohort:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                      name:
                        type: string
                  career_summary:
                    type: object
                    properties:
                      current_company:
                        type: string
                      current_title:
                        type: string
                      experience:
                        type: array
                        items:
                          type: object
                          properties:
                            company:
                              type: string
                            title:
                              type: string
                            duration:
                              type: string
                  tags:
                    type: array
                    items:
                      type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/v2/university/students:
    get:
      tags:
        - Advisor
      summary: Get students by university
      description: Retrieve all students in the advisor's university with filtering options
      operationId: getStudentsByUniversity
      security:
        - BearerAuth: []
      parameters:
        - name: cohort_ids
          in: query
          description: Filter by cohort IDs (comma-separated)
          schema:
            type: string
        - name: search
          in: query
          description: Search by student name or email
          schema:
            type: string
        - name: tags
          in: query
          description: Filter by tags (comma-separated)
          schema:
            type: string
        - name: graduation_year
          in: query
          description: Filter by graduation year
          schema:
            type: integer
        - name: program
          in: query
          description: Filter by program
          schema:
            type: string
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
      responses:
        '200':
          description: Students retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  students:
                    type: array
                    items:
                      $ref: '#/components/schemas/Student'
                  total:
                    type: integer
                  limit:
                    type: integer
                  offset:
                    type: integer
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /api/v2/university/students/{id}/summary:
    get:
      tags:
        - Advisor
      summary: Get student AI summary
      description: Get AI-generated summary of a student's profile and activities
      operationId: getStudentAISummary
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Student ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Student summary retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  summary:
                    type: string
                    description: AI-generated summary of student profile
                  key_achievements:
                    type: array
                    items:
                      type: string
                  recommendations:
                    type: array
                    items:
                      type: string
                  activity_level:
                    type: string
                    enum:
                      - low
                      - medium
                      - high
                  last_updated:
                    type: string
                    format: date-time
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/v2/university/students/{id}/contacts:
    get:
      tags:
        - Advisor
      summary: Get student contacts
      description: Retrieve all contacts for a specific student
      operationId: getStudentContacts
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Student ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Student contacts retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contact'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/v2/university/student/{id}/notes:
    get:
      tags:
        - Advisor
      summary: Get student notes
      description: Retrieve all notes for a specific student (advisor-only)
      operationId: getStudentNotes
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Student ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Notes retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    content:
                      type: string
                    author_id:
                      type: string
                      format: uuid
                    author_name:
                      type: string
                    created_at:
                      type: string
                      format: date-time
                    updated_at:
                      type: string
                      format: date-time
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
    post:
      tags:
        - Advisor
      summary: Create student note
      description: Add a new note for a student (advisor-only)
      operationId: createStudentNote
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Student ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                  description: Note content
      responses:
        '201':
          description: Note created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
  /api/v2/university/analytics/networking:
    get:
      tags:
        - Advisor
      summary: Get networking statistics
      description: Retrieve networking analytics for the university/cohort
      operationId: getNetworkingStats
      security:
        - BearerAuth: []
      parameters:
        - name: cohort_ids
          in: query
          description: Filter by cohort IDs (comma-separated)
          schema:
            type: string
        - name: date_from
          in: query
          description: Start date for analytics
          schema:
            type: string
            format: date
        - name: date_to
          in: query
          description: End date for analytics
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Networking statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_connections:
                    type: integer
                    description: Total connections made
                  total_messages:
                    type: integer
                    description: Total messages sent
                  avg_connections_per_student:
                    type: number
                    format: float
                  avg_messages_per_student:
                    type: number
                    format: float
                  top_networkers:
                    type: array
                    items:
                      type: object
                      properties:
                        student_id:
                          type: string
                          format: uuid
                        student_name:
                          type: string
                        connections_count:
                          type: integer
                  connection_trends:
                    type: array
                    items:
                      type: object
                      properties:
                        date:
                          type: string
                          format: date
                        count:
                          type: integer
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /api/v2/university/analytics/companies/top:
    get:
      tags:
        - Advisor
      summary: Get top companies analytics
      description: Retrieve analytics about top companies students are targeting
      operationId: getTopCompaniesWithStudents
      security:
        - BearerAuth: []
      parameters:
        - name: cohort_ids
          in: query
          description: Filter by cohort IDs (comma-separated)
          schema:
            type: string
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Company analytics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  companies:
                    type: array
                    items:
                      type: object
                      properties:
                        company_id:
                          type: string
                          format: uuid
                        company_name:
                          type: string
                        logo_url:
                          type: string
                        industry:
                          type: string
                        student_count:
                          type: integer
                          description: Number of students targeting this company
                        applications_count:
                          type: integer
                          description: Number of applications to this company
                        saves_count:
                          type: integer
                          description: Number of students who saved this company
                  total:
                    type: integer
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /api/v2/university/advisors/with-cohorts:
    get:
      tags:
        - Advisor
      summary: Get advisors with their cohorts
      description: Retrieve all advisors in the university with their assigned cohorts
      operationId: getAdvisorsWithCohorts
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Advisors retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    advisor_id:
                      type: string
                      format: uuid
                    name:
                      type: string
                    email:
                      type: string
                    profile_picture:
                      type: string
                      format: uri
                    cohorts:
                      type: array
                      items:
                        type: object
                        properties:
                          cohort_id:
                            type: string
                            format: uuid
                          cohort_name:
                            type: string
                          student_count:
                            type: integer
                    is_external:
                      type: boolean
                      description: Whether the advisor is an external advisor
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
  /api/v2/applications:
    get:
      tags:
        - Applications
      summary: Get applications (V2)
      description: Retrieve user's job applications with enhanced tracking (V2 API)
      operationId: getApplicationsV2
      security:
        - BearerAuth: []
      parameters:
        - name: status
          in: query
          description: Filter by application status
          schema:
            type: string
            enum:
              - saved
              - applied
              - interviewing
              - offered
              - rejected
              - accepted
              - archived
        - name: company_id
          in: query
          description: Filter by company ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Applications retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    company:
                      $ref: '#/components/schemas/Company'
                    jobs:
                      type: array
                      items:
                        $ref: '#/components/schemas/Job'
                    status:
                      type: string
                      enum:
                        - saved
                        - applied
                        - interviewing
                        - offered
                        - rejected
                        - accepted
                        - archived
                    ordering:
                      type: integer
                      description: Position in kanban board
                    deadline:
                      type: string
                      format: date-time
                      nullable: true
                    notes:
                      type: string
                    rating:
                      type: integer
                      minimum: 1
                      maximum: 5
                      nullable: true
                    hiring_score:
                      type: integer
                      minimum: 0
                      maximum: 100
                      nullable: true
                      description: AI-calculated hiring probability score
                    created_at:
                      type: string
                      format: date-time
                    updated_at:
                      type: string
                      format: date-time
        '401':
          $ref: '#/components/responses/UnauthorizedError'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Auth0 JWT token authentication
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for integration partners
  responses:
    UnauthorizedError:
      description: Failed to validate JWT token
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                enum:
                  - Failed to validate JWT token
                description: JWT token validation failed (expired, invalid, etc.)
            required:
              - error
    ForbiddenError:
      description: User does not have permission to access this resource
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Forbidden
              message:
                type: string
                example: Insufficient permissions
    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Not found
              message:
                type: string
                example: The requested resource was not found
    ValidationError:
      description: Request validation failed
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: Validation failed
              message:
                type: string
                example: One or more fields are invalid
              details:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                    message:
                      type: string
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerError'
    JSONValidationFailedError:
      description: Failed to parse request body to JSON schema
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JSONValidationFailedError'
    IDValidationFailedError:
      description: Failed to parse ID as UUID
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/IDValidationFailedError'
  parameters:
    UserIDPath:
      name: userID
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: User ID
    CompanyIDPath:
      name: id
      in: path
      required: true
      description: Company ID
      schema:
        type: string
        format: uuid
    JobIDPath:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: Job ID
    ContactIDPath:
      name: id
      in: path
      required: true
      description: Contact ID
      schema:
        type: string
        format: uuid
    EventIDPath:
      name: eventId
      in: path
      required: true
      description: Unique identifier for the event
      schema:
        type: string
        format: uuid
    UniversityIDPath:
      name: universityID
      in: path
      required: true
      schema:
        type: string
        format: uuid
      description: University ID
    Limit:
      name: limit
      in: query
      description: Maximum number of results to return
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 20
    Offset:
      name: offset
      in: query
      description: Number of results to skip (for pagination)
      schema:
        type: integer
        minimum: 0
        default: 0
  schemas:
    InternalServerError:
      type: object
      properties:
        error:
          type: string
          enum:
            - An internal server error has occurred
          description: Internal server error message
      required:
        - error
    User:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the user.
        first_name:
          type: string
          description: The user's first name.
        last_name:
          type: string
          description: The user's last name.
        email:
          type: string
          description: The user's email address.
        linkedin_slug:
          type: string
          description: The slug part of the user's LinkedIn profile.
        linkedin_urn:
          type: string
          description: The URN part of the user's LinkedIn profile, uniquely identifying the user on LinkedIn.
        linkedin_identifiers_updated_at:
          type: string
          format: date-time
          description: The timestamp when the LinkedIn identifiers were last updated.
      required:
        - id
        - first_name
        - last_name
        - email
    JobInfo:
      type: object
      properties:
        title:
          type: string
          description: Job title
        linkedin_url:
          type: string
          format: uri
          description: LinkedIn URL
      required:
        - title
    Application:
      type: object
      properties:
        id:
          type: string
          description: Application ID
          example: ed96665b-211f-4a03-a5ca-cd4ac2d74647
        status:
          type: string
          enum:
            - saved
            - networking
            - applying
            - applied
            - interviewing
            - offer
            - archive
          description: Application status
        ordering:
          type: integer
          description: Tile position on Kanban board.
        company_id:
          type: string
          description: Company ID
          example: 04a32379-f2fa-43cb-902f-5f0033677dfa
        company_name:
          type: string
          description: Company name
          example: Google
        industry:
          type: string
          description: Industry
        logo_url:
          type: string
          format: uri
          description: Logo URL
        linkedin_url:
          type: string
          format: uri
          description: LinkedIn URL
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/JobInfo'
          description: List of jobs associated with the application
        updated_at:
          type: string
          format: date-time
          description: Time of last update (create, status change) of application tile.
      required:
        - status
        - company_id
        - company_name
        - industry
        - logo_url
        - linkedin_url
        - jobs
    Student:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Student ID
          example: 61c99bca-0680-4756-ab9e-7d0f24565eee
        first_name:
          type: string
          description: Student first name
          example: Alex
        last_name:
          type: string
          description: Student last name
          example: Naidiuk
        email:
          type: string
          format: email
          description: Student email
          example: alek.naidiuk@gmail.com
        role:
          type: string
          description: Student role
        university_id:
          type: string
          format: uuid
          example: 51a16608-fdb9-4675-a8c3-9bc8c15710bb
        applications:
          type: array
          items:
            $ref: '#/components/schemas/Application'
    Company:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Company ID
        name:
          type: string
          description: Company name
        short_description:
          type:
            - 'null'
            - string
          description: Short description of the company
        overview:
          type: string
          description: Company overview
        hq_location:
          type: string
          description: Headquarters location of the company
        company_size:
          type: string
          description: Company size
        company_url:
          type: string
          format: uri
          description: Company website URL
        logo_url:
          type: string
          format: uri
          description: URL of the company's logo
        linkedin_url:
          type: string
          format: uri
          description: LinkedIn profile URL of the company
        twitter_url:
          type:
            - 'null'
            - string
          format: uri
          description: Twitter profile URL of the company
        industry:
          type: string
          description: Industry of the company as on LinkedIn
        careeros_industry:
          type:
            - 'null'
            - string
          description: Industry of the company as on CareerOs
        application_id:
          type:
            - 'null'
            - string
          format: uuid
          description: ID of the associated application (if any)
        application_status:
          type:
            - 'null'
            - string
          description: Status of the associated application (if any)
        source:
          type:
            - 'null'
            - string
          description: Source of the company information
        tags:
          type: array
          items:
            type: string
          description: Tags associated with the company
      required:
        - name
        - overview
        - size
        - url
        - logo_url
        - linkedin_url
        - industry
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: Error message
      required:
        - error
    JSONValidationFailedError:
      type: object
      properties:
        error:
          type: string
          enum:
            - The supplied JSON is not correctly formatted
          description: Failed to bind request body to JSON schema
      required:
        - error
    CompanySearchFields:
      type: object
      properties:
        name:
          type: string
          description: The name of the target company
        linkedin_slug:
          type: string
          description: |
            The LinkedIn slug of the target company (the part of the LinkedIn URL after the last slash, 
            e.g. 'google' for https://www.linkedin.com/company/google/)
      required:
        - name
        - linkedin_slug
    Job:
      type: object
      properties:
        id:
          type: string
          description: Job ID
        company_id:
          type: string
          format: uuid
          description: ID of the company associated with the job
        title:
          type: string
          description: Job title
        location:
          type: string
          description: Job location
        description:
          type: string
          description: Job description
        note:
          type: string
          description: Additional note for the job
        linkedin_url:
          type: string
          format: uri
          description: LinkedIn URL of the job posting
        source:
          type: string
          description: Source of the job posting
      required:
        - title
        - location
        - description
        - linkedin_url
        - source
    CompanyWithJobs:
      type: object
      properties:
        application_id:
          type: string
        application_status:
          type: string
        careeros_industry:
          type: string
          example: Tech
        company_size:
          type: string
          example: 2-10 employees
        company_url:
          type: string
        hq_location:
          type: string
          example: Barcelona, Spain
        id:
          type: string
        industry:
          type: string
          example: Software Development
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/Job'
        linkedin_url:
          type: string
        logo_url:
          type: string
        name:
          type: string
          example: Career OS
        overview:
          type: string
        short_description:
          type: string
        source:
          type: string
          example: ChromeExtension
        tags:
          type: array
          items:
            type: string
        twitter_url:
          type: string
      required:
        - company_size
        - company_url
        - industry
        - linkedin_url
        - logo_url
        - name
        - overview
    IDValidationFailedError:
      type: object
      properties:
        error:
          type: string
          enum:
            - The supplied ID format is invalid
          description: ID validation failed (not UUID)
      required:
        - error
    NotFoundError:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: 'Entity with id: 1 not found'
      required:
        - error
    JobWithCompanyName:
      type: object
      properties:
        company_id:
          type: string
        company_name:
          type: string
          example: Career OS
        description:
          type: string
          example: Bachelor's degree or equivalent practical experience
        id:
          type: string
        linkedin_url:
          type: string
          example: https://www.linkedin.com/jobs/search/?currentJobId=123456
        location:
          type: string
          example: Barcelona, Spain
        note:
          type: string
        source:
          type: string
          example: ChromeExtension
        title:
          type: string
          example: Cloud Engineer
        deadline:
          type: string
          format: date-time
          description: The field reflects the Applicaton deadline provided by the user.
        rolling_date:
          type: boolean
        posted_on:
          type: string
          format: date-time
          description: The field contains the date when a job was posted.
      required:
        - company_name
        - description
        - linkedin_url
        - location
        - source
        - title
    JobPatch:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Job ID
        deadline:
          type: string
          format: date-time
          description: The field reflects the Applicaton deadline provided by the user.
        rolling_date:
          type: boolean
    CurrentPosition:
      type: object
      properties:
        id:
          type: string
          description: Current position ID
        title:
          type: string
          description: Title of the current position
        company:
          type: string
          description: Company of the current position
        location:
          type: string
          description: Location of the current position
        company_id:
          type:
            - 'null'
            - string
          format: uuid
          description: ID of the company of the current position
    Contact:
      type: object
      properties:
        id:
          type: string
          description: Contact ID
        first_name:
          type: string
          description: First name of the contact
        last_name:
          type: string
          description: Last name of the contact
        email:
          type: string
          description: Email address of the contact
        secondary_email:
          type: string
          description: Secondary email address of the contact
        phone:
          type: string
          description: Phone number of the contact
        current_position:
          $ref: '#/components/schemas/CurrentPosition'
        career_summary:
          type: object
          description: Career summary of the contact
        location:
          type: string
          description: Location of the contact
        linkedin_url:
          type: string
          format: uri
          description: LinkedIn profile URL of the contact
        linkedin_urn:
          type:
            - 'null'
            - string
          format: uri
          description: LinkedIn profile URN of the contact
        linkedin_connection_status:
          type: string
          enum:
            - connected
            - notConnected
            - pending
        is_active:
          type: boolean
          description: Indicates whether the contact is active or not
        source:
          type: string
          description: Source of the contact information
      required:
        - first_name
        - last_name
    Tile:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
        ordering:
          type: integer
    Basics_location:
      type: object
      properties:
        address:
          type: string
          example: 2712 Broadway St
        postalCode:
          type: string
          example: CA 94115
        city:
          type: string
          example: San Francisco
        countryCode:
          type: string
          example: US
        region:
          type: string
          example: US
    Basics_profile:
      type: object
      properties:
        network:
          type: string
          example: Twitter
        username:
          type: string
          example: john
        url:
          type: string
          example: https://twitter.com/john
    Basics:
      type: object
      properties:
        name:
          type: string
          example: John Doe
        label:
          type: string
          example: Programmer
        image:
          type: string
          example: https://static.vecteezy.com/system/resources/previews/023/654/784/non_2x/golden-logo-template-free-png.png
        emails:
          type:
            - 'null'
            - array
          items:
            type: string
          example:
            - test@thecareeros.com
            - test@gmail.com
        phone_numbers:
          type:
            - 'null'
            - array
          items:
            type: string
          example:
            - +4 23 223 2313
            - '+380680223232'
        url:
          type: string
          example: '+380671234567'
        summary:
          type: string
          example: A summary of John Doe…
        location:
          type: object
          $ref: '#/components/schemas/Basics_location'
        work_permit:
          type:
            - 'null'
            - array
          items:
            type: string
        nationality:
          type:
            - 'null'
            - array
          items:
            type: string
        profiles:
          type: array
          items:
            $ref: '#/components/schemas/Basics_profile'
    Work:
      type: object
      properties:
        name:
          type: string
          example: Company
        position:
          type: string
          example: President
        url:
          type: string
          example: https://company.com
        startDate:
          type: string
          format: date
          example: '2013-01-01'
        endDate:
          type: string
          format: date
          example: '2014-01-01'
        summary:
          type: string
          example: Description…
        highlights:
          type: array
          items:
            type: string
          example:
            - Started the company
    Volunteer:
      type: object
      properties:
        organization:
          type: array
          items:
            type: string
          example: Organization
        position:
          type: string
          example: Senior
        url:
          type: string
          format: uri
          example: https://organization.com
        startDate:
          type: string
          format: date
          example: '2011-01-01'
        endDate:
          type: string
          format: date
          example: '2011-01-01'
        summary:
          type: string
          example: A brief summary or description of the volunteering experience.
        highlights:
          type: array
          items:
            type: string
          example: Example
    Education:
      type: object
      properties:
        institution:
          type: string
          example: University
        url:
          type: string
          format: uri
          example: https://institution.com
        area:
          type: string
          example: Software Development
        studyType:
          type: string
          example: Bachelor
        startDate:
          type: string
          format: date
          example: '2011-01-01'
        endDate:
          type: string
          format: date
          example: '2013-01-01'
        score:
          type: number
          format: float
          example: 4
        courses:
          type: array
          items:
            type: string
          example: React Native developer
    Award:
      type: object
      properties:
        title:
          type: string
          example: Award
        date:
          type: string
          format: date
          example: '2014-11-01'
        awarder:
          type: string
          example: Company
        summary:
          type: string
          example: There is no spoon.
    Certification:
      type: object
      properties:
        name:
          type: string
          example: Certification
        date:
          type: string
          format: date
          example: '2011-01-01'
        area:
          type: string
          example: Software Development
        issuer:
          type: string
          example: Company
        url:
          type: string
          format: uri
          example: https://institution.com
    Publication:
      type: object
      properties:
        name:
          type: string
          example: Publication
        publisher:
          type: string
          example: Company
        releaseDate:
          type: string
          format: date
          example: '2014-10-01'
        url:
          type: string
          format: uri
          example: https://institution.com
        summary:
          type: string
          example: Description…
    Skill:
      type: object
      properties:
        name:
          type: string
          example: Web Development
        level:
          type: string
          example: Company
        keywords:
          type: array
          items:
            type: string
            example: JavaScript
    Language:
      type: object
      properties:
        language:
          type: string
          example: English
        fluency:
          type: string
          example: Native speaker
    Interest:
      type: object
      properties:
        name:
          type: string
          example: Wildlife
        keywords:
          type: array
          items:
            type: string
            example: Ferrets
    Reference:
      type: object
      properties:
        name:
          type: string
          example: Jane Doe
        reference:
          type: string
          example: Reference…
    Project:
      type: object
      properties:
        name:
          type: string
          example: Project
        startDate:
          type: string
          format: date
          example: '2011-01-01'
        endDate:
          type: string
          format: date
          example: '2013-01-01'
        description:
          type: string
          example: Description...
        highlights:
          type: array
          items:
            type: string
          example:
            - Won award at AIHacks 2016
            - Won award at AIHacks 2017
        url:
          type: string
          format: uri
          example: https://project.com
    Additional_information:
      type: object
      properties:
        bullets:
          type:
            - 'null'
            - array
          items:
            type: string
          example:
            - Some information here
        gmatscore:
          type:
            - 'null'
            - string
          example: '305'
    Resume:
      type: object
      properties:
        basics:
          $ref: '#/components/schemas/Basics'
        work:
          type: array
          items:
            $ref: '#/components/schemas/Work'
        volunteer:
          type: array
          items:
            $ref: '#/components/schemas/Volunteer'
        education:
          type: array
          items:
            $ref: '#/components/schemas/Education'
        awards:
          type: array
          items:
            $ref: '#/components/schemas/Award'
        certifications:
          type: array
          items:
            $ref: '#/components/schemas/Certification'
        publications:
          type: array
          items:
            $ref: '#/components/schemas/Publication'
        skills:
          type: array
          items:
            $ref: '#/components/schemas/Skill'
        languages:
          type: array
          items:
            $ref: '#/components/schemas/Language'
        interests:
          type: array
          items:
            $ref: '#/components/schemas/Interest'
        references:
          type: array
          items:
            $ref: '#/components/schemas/Reference'
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
        additional_information:
          $ref: '#/components/schemas/Additional_information'
    Resume_template:
      type: object
      properties:
        id:
          type: string
          example: 8de6cfbf-9cef-439a-91d3-1f93b91ce84a
        university_id:
          type: string
          format: uuid
          example: a4bd6f2b-fb4e-48ec-909d-42b71953f3ed
        name:
          type:
            - 'null'
            - string
          example: ESMT
        preview_image:
          type: string
          format: uri
          example: https://www.example.com/image.jpg
        created_at:
          type: string
          format: date
        updated_at:
          type: string
          format: date
    base_resume_response:
      type: object
      properties:
        id:
          type: string
          example: 5f994df8-3c0f-4eda-8bcf-db4aeb35d43f
        user_id:
          type: string
          example: 7d7f5b28-0c7c-4af9-8a15-e421e71ec39b
        preview_url:
          type: string
          example: https://placehold.co/100x500
        title:
          type: string
          example: My resume
        resume:
          $ref: '#/components/schemas/Resume'
        resume_template:
          $ref: '#/components/schemas/Resume_template'
        created_at:
          type: string
          format: date
        updated_at:
          type: string
          format: date
    UnauthorizedError:
      type: object
      properties:
        error:
          type: string
          enum:
            - Failed to validate JWT token
          description: JWT token validation failed (expired, invalid, etc.)
      required:
        - error
