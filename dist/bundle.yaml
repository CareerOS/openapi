openapi: 3.0.1
info:
  title: The CareerOS API
  description: The CareerOS server API documentation
  contact: {}
  version: 1.0.0
  license:
    name: CareerOS internal usage license
    url: https://github.com/CareerOS/openapi/blob/main/LICENSE_TCOS
servers:
  - url: https://backend-00001-tuf-diofvmfqga-oc.a.run.app
    description: Development server
  - url: https://backend-prod-tsalqjuvda-oc.a.run.app
    description: Production server
security:
  - BearerAuth: []
tags:
  - name: Careers
    description: Careers endpoint
  - name: Applications
    description: Kanban tiles
paths:
  /public/v1/universities:
    get:
      tags:
        - Public
        - Universities
      summary: Get universities
      description: Get all enrolled universities
      operationId: getUniversities
      security: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    name:
                      type: string
        '500':
          $ref: '#/components/responses/InternalServerError'
  /public/v1/universities/{universityID}/providers:
    get:
      tags:
        - Public
        - Providers
      summary: Get providers supported by the university
      description: Get providers supported by the university
      operationId: getUniversityProviders
      security: []
      parameters:
        - in: path
          name: universityID
          description: ID of the university
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '500':
          $ref: '#/components/responses/InternalServerError'
  /public/v1/universities/{universityID}/providers/{providerName}:
    get:
      tags:
        - Public
        - Providers
      summary: Get supported domain list for selected university login provider
      description: Get supported domain list for selected university login provider
      operationId: getUniversityProviderDomains
      security: []
      parameters:
        - in: path
          name: universityID
          description: ID of the university
          required: true
          schema:
            type: string
            format: uuid
        - in: path
          name: providerName
          description: Name of the supported provider
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/applications/{studentId}:
    get:
      tags:
        - Careers
      operationId: getApplicationForStudent
      summary: Get application details for a student
      description: Returns application details for a student
      parameters:
        - name: studentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the student for whom to retrieve the application details
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
        '400':
          $ref: '#/components/responses/IDValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/applications:
    get:
      tags:
        - Applications
      operationId: getApplications
      summary: Returns all applications
      description: Returns applications
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Application'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      tags:
        - Applications
      summary: Change Application Status
      operationId: changeApplicationStatus
      requestBody:
        description: Tile's data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tile'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
        '400':
          $ref: '#/components/responses/JSONValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/applications/archive:
    get:
      tags:
        - Applications
      summary: Application For User
      description: Returns applications
      operationId: getArchivedApplications
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Application'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/universities:
    post:
      tags:
        - Universities
      summary: Save university
      description: Saving university to db and current user's favorite universities
      operationId: saveUniversity
      requestBody:
        description: University data required to save to DB
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Company'
        required: true
      responses:
        '201':
          description: Successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  universityID:
                    type: string
                    format: uuid
        '400':
          $ref: '#/components/responses/JSONValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/enroll:
    post:
      tags:
        - Universities
      summary: Enroll user to university
      description: Enrolls the authenticated user to a university
      operationId: enrollUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                university:
                  type: string
                cohort:
                  type: string
              required:
                - university
                - cohort
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/JSONValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/self/university:
    get:
      tags:
        - Universities
      summary: Get self university
      description: Get the university object associated with the authenticated user
      operationId: getSelfUniversity
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name:
                    type: string
                  domain:
                    type: string
                  created_at:
                    type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/universities/{universityID}/students:
    get:
      tags:
        - Universities
      summary: Get students by university ID
      description: Get students associated with a specific university
      operationId: getStudentsByUniversityID
      parameters:
        - in: path
          name: universityID
          description: ID of the university
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '400':
          $ref: '#/components/responses/IDValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/cohort/{cohortID}/students:
    get:
      tags:
        - Universities
      summary: Get students by cohort ID
      description: Get students associated with a specific cohort
      operationId: getStudentsByCohortID
      parameters:
        - in: path
          name: cohortID
          description: ID of the cohort
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '400':
          $ref: '#/components/responses/IDValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/university/{universityID}/cohorts:
    get:
      tags:
        - Universities
      summary: Get cohorts by university ID
      description: Get cohorts associated with a specific university
      operationId: getCohortbyUniversityID
      parameters:
        - in: path
          name: universityID
          description: ID of the university
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
        '400':
          $ref: '#/components/responses/IDValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/companies:
    get:
      tags:
        - Companies
      summary: Get companies
      description: Returns companies
      operationId: getCompanies
      parameters:
        - name: page
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
          description: Page number for pagination
        - name: industry
          in: query
          schema:
            type: string
          description: Filter by industry
        - name: category
          in: query
          schema:
            type: string
          description: Filter by category
        - name: tag
          in: query
          schema:
            type: string
          description: Filter by tag
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Company'
        '400':
          description: Bad request - Invalid page or parameter format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Companies
      summary: Save Company
      description: Saving Company to DB & current user's favorite companies
      operationId: saveCompany
      requestBody:
        description: Company data required to save to DB
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Company'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  companyID:
                    type: string
        '400':
          $ref: '#/components/responses/JSONValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/companies/issaved:
    post:
      tags:
        - Companies
      summary: Validate company
      description: |
        Endpoint checks if the company exists in the CareerOS database and is it saved by the user.

        Matching rules:
            - company is checked by name and slug

        The endpoint is used exclusively by the browser extension.
      operationId: validateCompany
      requestBody:
        description: LinkedIn identifiers of the company to be validated against (name and slug)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanySearchFields'
      responses:
        '200':
          description: Company can be saved - it exists in the database and is not saved by the user yet
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    enum:
                      - Company can be saved
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Company not found - we don't have this company in our database
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    enum:
                      - Company does not exist in the database
        '409':
          description: Conflict - user already saved this company
          content:
            application/json:
              schema:
                type: object
                properties:
                  company_id:
                    type: string
                    format: uuid
                    description: ID of the company
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/companies/{id}:
    get:
      tags:
        - Companies
      summary: Get Company by ID
      description: Get Company with Jobs by company_id
      operationId: getCompanyById
      parameters:
        - name: id
          in: path
          description: Company ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyWithJobs'
        '400':
          $ref: '#/components/responses/IDValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/companies/explore:
    get:
      tags:
        - Companies
      summary: Get explore companies
      description: Get companies by industry
      operationId: getExploreCompanies
      parameters:
        - name: industry
          in: query
          description: Company industry
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Company'
        '204':
          description: No content
          content: {}
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/companies/search/{name}:
    get:
      tags:
        - Companies
      summary: Get companies by name
      description: Search companies by name
      operationId: searchCompaniesByName
      parameters:
        - name: name
          in: path
          description: Company name
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Company'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/contacts:
    post:
      tags:
        - Contacts
      summary: Save contact
      description: Save a contact to DB & for current user
      operationId: saveContact
      requestBody:
        description: Contact's data from chrome extension
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contact'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  id:
                    type: string
                    format: uuid
        '400':
          $ref: '#/components/responses/JSONValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/contacts/issaved:
    post:
      tags:
        - Contacts
      summary: Validate contact
      description: |
        Endpoint checks if the company in which contact works currently exists in the CareerOS database, and 
        that given contact is not yet saved by the user for the given company.

        Matching rules:
         - company is checked by name and slug
         - contact is checked by linkedin_url

        The endpoint is used exclusively by the browser extension.
      operationId: validateContact
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    company:
                      $ref: '#/components/schemas/CompanySearchFields'
                - type: object
                  properties:
                    contact_linkedin_url:
                      type: string
                      description: LinkedIn URL of the contact
                  required:
                    - company
                    - contact_linkedin_url
      responses:
        '200':
          description: Contact can be saved
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    enum:
                      - Contact can be saved
        '400':
          $ref: '#/components/responses/JSONValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          description: Conflict - user already saved this contact for the given company
          content:
            application/json:
              schema:
                type: object
                properties:
                  company_id:
                    type: string
                    format: uuid
                    description: ID of the matched company in which contact works
                  contact_id:
                    type: string
                    format: uuid
                    description: ID of the already saved contact
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/contacts/{id}:
    get:
      tags:
        - Contacts
      summary: Get contact by ID
      description: Get contact by ID
      operationId: getContactByID
      parameters:
        - name: id
          in: path
          description: Contact ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        '400':
          $ref: '#/components/responses/IDValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Contacts
      summary: Delete contact
      description: Delete a contact from DB & for current user by ID
      operationId: deleteContact
      parameters:
        - name: id
          in: path
          description: Contact ID
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/IDValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/contacts/{id}/email:
    post:
      tags:
        - Contacts
      summary: Set emails by contactID
      description: Set emails by contactID
      operationId: setEmailsByContactID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the contact for whom to set emails
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                secondary_email:
                  type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Success message
        '400':
          description: Failed to parse ID as UUID or bind JSON body
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/IDValidationFailedError'
                  - $ref: '#/components/schemas/JSONValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/contacts/{id}/chat:
    get:
      tags:
        - Contacts
      summary: Get contact with chatID
      description: Get contact with chatID
      operationId: getContactWithChatID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the chat for which to retrieve contact information
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        '400':
          $ref: '#/components/responses/IDValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/contacts/bycompany/{id}:
    get:
      tags:
        - Contacts
      summary: Get contacts by company ID
      description: Returns all contacts that have relations with the given company
      operationId: getContactsByCompanyID
      parameters:
        - name: id
          in: path
          description: Company ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contact'
        '400':
          $ref: '#/components/responses/IDValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/contacts/bycompany/{id}/byuser/{userID}:
    get:
      tags:
        - Contacts
      summary: Get contacts by companyID and userID
      description: Returns all contacts that have relations with the given company and user
      operationId: getContactsByCompanyIDAndUserID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the company to filter contacts
        - name: userID
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: ID of the user for whom to retrieve contacts
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contact'
        '400':
          $ref: '#/components/responses/IDValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/contacts/{contactID}/linkedin:
    put:
      tags:
        - Contacts
      summary: Update contact information
      description: This endpoint updates the contact's linkedin connection status
      operationId: updateContact
      parameters:
        - name: contactID
          in: path
          description: ID of the contact of whom update contact information for
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Contact'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    enum:
                      - Contact updated successfully
        '400':
          description: |
            Invalid input data format: contactID or JSON
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/JSONValidationFailedError'
                  - $ref: '#/components/schemas/IDValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/linkedin/messages:
    post:
      tags:
        - LinkedIn Messaging
      summary: Create messages
      description: Create LinkedIn messages for the authenticated user
      operationId: createLinkedInMessages
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '400':
          $ref: '#/components/responses/JSONValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/linkedin/messages/{studentID}:
    get:
      tags:
        - LinkedIn Messaging
      summary: Get messages count for student
      description: Get the count of messages for a specific student
      operationId: getMessagesCountForStudent
      parameters:
        - name: studentID
          in: path
          description: The ID of the student
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  messages_sent:
                    type: integer
                  messages_received:
                    type: integer
        '400':
          $ref: '#/components/responses/IDValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/linkedin/message/send:
    post:
      tags:
        - LinkedIn Messaging
      summary: Send message
      description: Send a LinkedIn message
      operationId: sendMessage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                conversation_id:
                  type: string
                  format: uuid
                message:
                  type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/JSONValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/linkedin/conversations:
    post:
      tags:
        - LinkedIn Messaging
      summary: Create or update conversations
      description: Create or update conversations
      operationId: createOrUpdateConversations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                elements:
                  type: array
                  items:
                    $ref: '#/components/schemas/LinkedInConversation'
      responses:
        '200':
          description: Successfully created or updated conversations
          content:
            application/json:
              schema:
                type: object
                properties:
                  updated_chats:
                    type: array
                    items:
                      type: string
        '400':
          $ref: '#/components/responses/JSONValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/linkedin/conversations/updateall:
    post:
      tags:
        - LinkedIn Messaging
      summary: Force update message history
      description: Force update the message history for the authenticated user
      operationId: forceUpdateMessageHistory
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/linkedin/connection/update/{contactID}:
    get:
      tags:
        - LinkedIn Messaging
      summary: Trigger an update of connection status
      description: This endpoint triggers the sync of the connection status between the user and the contact according to the connection status on LinkedIn. After successful operation extension will call back the update contact endpoint, which will update the connection status in the DB.
      operationId: updateConnection
      parameters:
        - name: contactID
          in: path
          description: ID of the contact for which connection status should be updated
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    enum:
                      - Update connection status request sent successfully
        '400':
          $ref: '#/components/responses/IDValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/linkedin/connection/send:
    post:
      tags:
        - LinkedIn Messaging
      summary: Send connection
      description: Send a connection request to a contact
      operationId: sendConnection
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                to_contact_id:
                  type: string
                  format: uuid
                text:
                  type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/JSONValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/companies/favorite:
    get:
      tags:
        - Favorite Companies
      summary: Get favorite companies
      description: Get user's favorite (saved) companies by current userID
      operationId: getFavoriteCompanies
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Company'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/companies/favorite/{id}:
    get:
      tags:
        - Favorite Companies
      summary: Toggle favorite company
      description: Adding & removing company by ID and current userID
      operationId: toggleFavoriteCompany
      parameters:
        - name: id
          in: path
          description: Company ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  action:
                    type: string
        '400':
          $ref: '#/components/responses/IDValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/linkedin/fcm/token:
    get:
      tags:
        - FCM Token
      summary: Get extension FCM token
      description: Get the FCM token for the extension
      operationId: getExtensionFCMToken
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Token not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    enum:
                      - FCM token not found
                    description: FCM token not found for extension user (extension must register and send FCM token first)
                required:
                  - error
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - FCM Token
      summary: Register extension FCM token
      description: Register the FCM token for the extension
      operationId: registerExtensionFCM
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    enum:
                      - Success
                    description: FCM token registered successfully
        '202':
          description: Successful operation (FCM token already exists)
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    enum:
                      - Token already registered
                    description: FCM token already registered for given extension user
        '400':
          $ref: '#/components/responses/JSONValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/firebase/token:
    get:
      tags:
        - Firestore Auth
      summary: Issue firestore access token for user
      description: Issue a firestore token for the authenticated user
      operationId: getFirestoreToken
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/industries:
    get:
      tags:
        - Industries
      summary: Get industries
      description: Get all industries
      operationId: getIndustries
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Industry'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/jobs:
    get:
      tags:
        - Jobs
      summary: Get Jobs
      description: Get a list of jobs
      operationId: getJobs
      parameters:
        - name: limit
          in: query
          description: The maximum number of jobs to retrieve
          required: true
          schema:
            type: integer
            minimum: 1
        - name: offset
          in: query
          description: The offset for pagination
          required: true
          schema:
            type: integer
            minimum: 0
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Job'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Jobs
      summary: Save job
      description: Save a job to DB & for current user
      operationId: saveJob
      requestBody:
        description: Job's data from Chrome Extension
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobWithCompanyName'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/JSONValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/jobs/{id}:
    patch:
      tags:
        - Jobs
      summary: Update job
      description: The endpoint updates a piece of information about the job.
      operationId: updateJob
      parameters:
        - name: id
          in: path
          description: Job ID
          required: true
          schema:
            type: string
      requestBody:
        description: Job fields for updating.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JobPatch'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: The request body or the job ID in the path has an incorrect format or is empty.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/IDValidationFailedError'
                  - $ref: '#/components/schemas/JSONValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/jobs/issaved:
    post:
      tags:
        - Jobs
      summary: Validate job
      description: |
        Endpoint checks if the company in which job is opened exists in the CareerOS database, and 
        that given job is not yet saved by the user for the given company.

        Matching rules:
         - company is checked by name and slug
         - job is checked by linkedin_url

        The endpoint is used exclusively by the browser extension.
      operationId: validateJob
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    company:
                      $ref: '#/components/schemas/CompanySearchFields'
                - type: object
                  properties:
                    job_linkedin_url:
                      type: string
                      description: LinkedIn URL of the job
                  required:
                    - company
                    - job_linkedin_url
      responses:
        '200':
          description: Job can be saved
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    enum:
                      - Job can be saved
        '400':
          $ref: '#/components/responses/JSONValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          description: Conflict - user already saved this job
          content:
            application/json:
              schema:
                type: object
                properties:
                  company_id:
                    type: string
                    format: uuid
                    description: ID of the matched company in which job is opened
                  job_id:
                    type: string
                    format: uuid
                    description: ID of the already saved job
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/outlook/messages:
    get:
      tags:
        - Outlook Messaging
      summary: Get outlook messages
      description: Get Outlook messages for the authenticated user
      operationId: getOutlookMessages
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/outlook/message/send:
    post:
      tags:
        - Outlook Messaging
      summary: Send outlook message
      description: Send an Outlook message to a recipient
      operationId: sendOutlookMessage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                to_email:
                  type: string
                subject:
                  type: string
                message:
                  type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/JSONValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/templates:
    get:
      tags:
        - Templates
      summary: Get templates
      description: Returns all templates
      operationId: getTemplates
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Template'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/templates/prefill/{id}:
    get:
      tags:
        - Templates
      summary: Populate template for user
      description: Returns prefill templates for user
      operationId: populateTemplatesForContact
      parameters:
        - name: id
          in: path
          description: Contact ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Template'
        '400':
          $ref: '#/components/responses/IDValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/login:
    post:
      tags:
        - Users
      summary: User login
      description: Logs in a user using the provided token (Authorization header)
      operationId: loginUser
      parameters:
        - in: header
          name: Authorization
          description: Access token for authentication
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/users/{id}:
    delete:
      tags:
        - Users
      summary: Delete user
      description: Removes a user
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: object
        '400':
          $ref: '#/components/responses/IDValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/users/self:
    get:
      tags:
        - Users
      summary: Get self user info
      description: Returns a self user info
      operationId: getSelfUserInfo
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Contact'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/users/contacts:
    get:
      tags:
        - Users
      summary: Get user contacts
      description: Returns a user's favorite (saved) contacts
      operationId: getUserContacts
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Contact'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/users/users/conversations:
    get:
      tags:
        - Users
      summary: Get user conversations
      description: Get conversations for the authenticated user
      operationId: getUserConversations
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/users/self/lid:
    post:
      tags:
        - Users
      summary: Set self user URN
      description: Set self user URN and LinkedIn ID for the authenticated user
      operationId: setSelfUserURN
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                urn:
                  type: string
                linkedin_id:
                  type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          $ref: '#/components/responses/JSONValidationFailedError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/v1/users/self/statistics:
    get:
      tags:
        - Users
      summary: Get app usage statistics for current user
      description: |
        The endpoint aggregates and returns usage statistics for the dashboard pages. It returns weekly goals and challenges info. 
      operationId: getUsageStatisticsForUser
      parameters:
        - name: date
          in: query
          description: |
            The date and time from which aggregation should begin. The frontend client is expected to send time.Now(), the parameter is only used because of the time difference between the user and the server 
          required: true
          schema:
            type: string
            format: date
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsageStatistics'
        '400':
          description: |
            The date parameter is invalid or empty. It is required and should have the correct format: YYYY-MM-DD.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/DateParamValidationFailed'
                  - $ref: '#/components/schemas/DataParamIsEmptyError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    InternalServerError:
      type: object
      properties:
        error:
          type: string
          enum:
            - An internal server error has occurred
          description: Internal server error message
      required:
        - error
    JobInfo:
      type: object
      properties:
        title:
          type: string
          description: Job title
        linkedin_url:
          type: string
          format: uri
          description: LinkedIn URL
      required:
        - title
    Application:
      type: object
      properties:
        id:
          type: string
          description: Application ID
        status:
          type: string
          enum:
            - saved
            - networking
            - applying
            - applied
            - interviewing
            - offer
            - archive
          description: Application status
        company_id:
          type: string
          description: Company ID
        company_name:
          type: string
          description: Company name
        industry:
          type: string
          description: Industry
        logo_url:
          type: string
          format: uri
          description: Logo URL
        linkedin_url:
          type: string
          format: uri
          description: LinkedIn URL
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/JobInfo'
          description: List of jobs associated with the application
        updated_at:
          type: string
          format: date-time
          description: Time of last update (create, status change) of application tile.
      required:
        - status
        - company_id
        - company_name
        - industry
        - logo_url
        - linkedin_url
        - jobs
    IDValidationFailedError:
      type: object
      properties:
        error:
          type: string
          enum:
            - The supplied ID format is invalid
          description: ID validation failed (not UUID)
      required:
        - error
    UnauthorizedError:
      type: object
      properties:
        error:
          type: string
          enum:
            - Failed to validate JWT token
          description: JWT token validation failed (expired, invalid, etc.)
      required:
        - error
    Tile:
      type: object
      properties:
        id:
          type: string
        status:
          type: string
    JSONValidationFailedError:
      type: object
      properties:
        error:
          type: string
          enum:
            - The supplied JSON is not correctly formatted
          description: Failed to bind request body to JSON schema
      required:
        - error
    Company:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Company ID
        name:
          type: string
          description: Company name
        short_description:
          type: string
          nullable: true
          description: Short description of the company
        overview:
          type: string
          description: Company overview
        hq_location:
          type: string
          description: Headquarters location of the company
        company_size:
          type: string
          description: Company size
        company_url:
          type: string
          format: uri
          description: Company website URL
        logo_url:
          type: string
          format: uri
          description: URL of the company's logo
        linkedin_url:
          type: string
          format: uri
          description: LinkedIn profile URL of the company
        twitter_url:
          type: string
          format: uri
          nullable: true
          description: Twitter profile URL of the company
        industry:
          type: string
          description: Industry of the company as on LinkedIn
        careeros_industry:
          type: string
          nullable: true
          description: Industry of the company as on CareerOs
        application_id:
          type: string
          format: uuid
          nullable: true
          description: ID of the associated application (if any)
        application_status:
          type: string
          nullable: true
          description: Status of the associated application (if any)
        source:
          type: string
          nullable: true
          description: Source of the company information
        tags:
          type: array
          items:
            type: string
          description: Tags associated with the company
      required:
        - name
        - overview
        - size
        - url
        - logo_url
        - linkedin_url
        - industry
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
      required:
        - error
    CompanySearchFields:
      type: object
      properties:
        name:
          type: string
          description: The name of the target company
        linkedin_slug:
          type: string
          description: |
            The LinkedIn slug of the target company (the part of the LinkedIn URL after the last slash, 
            e.g. 'google' for https://www.linkedin.com/company/google/)
      required:
        - name
        - linkedin_slug
    Job:
      type: object
      properties:
        id:
          type: string
          description: Job ID
        company_id:
          type: string
          format: uuid
          description: ID of the company associated with the job
        title:
          type: string
          description: Job title
        location:
          type: string
          description: Job location
        description:
          type: string
          description: Job description
        note:
          type: string
          description: Additional note for the job
        linkedin_url:
          type: string
          format: uri
          description: LinkedIn URL of the job posting
        source:
          type: string
          description: Source of the job posting
      required:
        - title
        - location
        - description
        - linkedin_url
        - source
    CompanyWithJobs:
      type: object
      properties:
        application_id:
          type: string
        application_status:
          type: string
        careeros_industry:
          type: string
          example: Tech
        company_size:
          type: string
          example: 2-10 employees
        company_url:
          type: string
        hq_location:
          type: string
          example: Barcelona, Spain
        id:
          type: string
        industry:
          type: string
          example: Software Development
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/Job'
        linkedin_url:
          type: string
        logo_url:
          type: string
        name:
          type: string
          example: Career OS
        overview:
          type: string
        short_description:
          type: string
        source:
          type: string
          example: ChromeExtension
        tags:
          type: array
          items:
            type: string
        twitter_url:
          type: string
      required:
        - company_size
        - company_url
        - industry
        - linkedin_url
        - logo_url
        - name
        - overview
    CurrentPosition:
      type: object
      properties:
        id:
          type: string
          description: Current position ID
        title:
          type: string
          description: Title of the current position
        company:
          type: string
          description: Company of the current position
        location:
          type: string
          description: Location of the current position
        company_id:
          type: string
          format: uuid
          nullable: true
          description: ID of the company of the current position
    Contact:
      type: object
      properties:
        id:
          type: string
          description: Contact ID
        first_name:
          type: string
          description: First name of the contact
        last_name:
          type: string
          description: Last name of the contact
        email:
          type: string
          description: Email address of the contact
        secondary_email:
          type: string
          description: Secondary email address of the contact
        phone:
          type: string
          description: Phone number of the contact
        current_position:
          $ref: '#/components/schemas/CurrentPosition'
        career_summary:
          type: object
          description: Career summary of the contact
        location:
          type: string
          description: Location of the contact
        linkedin_url:
          type: string
          format: uri
          description: LinkedIn profile URL of the contact
        linkedin_urn:
          type: string
          format: uri
          nullable: true
          description: LinkedIn profile URN of the contact
        linkedin_connection_status:
          type: string
          enum:
            - connected
            - notConnected
            - pending
        is_active:
          type: boolean
          description: Indicates whether the contact is active or not
        source:
          type: string
          description: Source of the contact information
      required:
        - first_name
        - last_name
    AttributedBody:
      type: object
      properties:
        attributes:
          type: array
          items: {}
        text:
          type: string
    MessageEvent:
      type: object
      properties:
        messageBodyRenderFormat:
          type: string
        body:
          type: string
        attributedBody:
          $ref: '#/components/schemas/AttributedBody'
    Artifact:
      type: object
      properties:
        width:
          type: integer
        fileIdentifyingUrlPathSegment:
          type: string
        expiresAt:
          type: integer
        height:
          type: integer
    VectorImage:
      type: object
      properties:
        artifacts:
          type: array
          items:
            $ref: '#/components/schemas/Artifact'
    Picture:
      type: object
      properties:
        vectorImage:
          $ref: '#/components/schemas/VectorImage'
    MiniProfile:
      type: object
      properties:
        memorialized:
          type: boolean
        firstName:
          type: string
        lastName:
          type: string
        dashEntityUrn:
          type: string
        occupation:
          type: string
        objectUrn:
          type: string
        entityUrn:
          type: string
        publicIdentifier:
          type: string
        picture:
          $ref: '#/components/schemas/Picture'
        trackingId:
          type: string
        backgroundImage:
          $ref: '#/components/schemas/Picture'
    MessagingMember:
      type: object
      properties:
        miniProfile:
          $ref: '#/components/schemas/MiniProfile'
        entityUrn:
          type: string
        nameInitials:
          type: string
    Event:
      type: object
      properties:
        createdAt:
          type: integer
        reactionSummaries:
          type: array
          items: {}
        dashEntityUrn:
          type: string
        quickReplyRecommendations:
          type: array
          items: {}
        entityUrn:
          type: string
        eventContent:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/MessageEvent'
        subtype:
          type: string
        from:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/MessagingMember'
        previousEventInConversation:
          type: string
        backendUrn:
          type: string
    LinkedInConversation:
      type: object
      properties:
        dashEntityUrn:
          type: string
        inboxType:
          type: string
        notificationStatus:
          type: string
        read:
          type: boolean
        groupChat:
          type: boolean
        totalEventCount:
          type: integer
        unreadCount:
          type: integer
        lastActivityAt:
          type: integer
        firstMessageUrn:
          type: string
        backendUrn:
          type: string
        receipts:
          type: array
          items: {}
        lastReadAt:
          type: integer
        archived:
          type: boolean
        blocked:
          type: boolean
        starred:
          type: boolean
        entityUrn:
          type: string
        sdkEntityUrn:
          type: string
        viewerCurrentParticipant:
          type: boolean
        featureTypes:
          type: array
          items:
            type: string
        withNonConnection:
          type: boolean
        muted:
          type: boolean
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
        participants:
          type: array
          items:
            $ref: '#/components/schemas/MessagingMember'
    Industry:
      type: object
      properties:
        name:
          type: string
          description: Name of the industry
        icon:
          type: string
          description: URL of the industry icon
      required:
        - name
    JobWithCompanyName:
      type: object
      properties:
        company_id:
          type: string
        company_name:
          type: string
          example: Career OS
        description:
          type: string
          example: Bachelor's degree or equivalent practical experience
        id:
          type: string
        linkedin_url:
          type: string
          example: https://www.linkedin.com/jobs/search/?currentJobId=123456
        location:
          type: string
          example: Barcelona, Spain
        note:
          type: string
        source:
          type: string
          example: ChromeExtension
        title:
          type: string
          example: Cloud Engineer
        deadline:
          type: string
          format: date-time
          description: The field reflects the Applicaton deadline provided by the user.
        rolling_date:
          type: boolean
        posted_on:
          type: string
          format: date-time
          description: The field contains the date when a job was posted.
      required:
        - company_name
        - description
        - linkedin_url
        - location
        - source
        - title
    JobPatch:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Job ID
        deadline:
          type: string
          format: date-time
          description: The field reflects the Applicaton deadline provided by the user.
        rolling_date:
          type: boolean
    Template:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Template ID
        type:
          type: string
          description: Type of the template
        outreach_type:
          type: string
          description: Outreach type of the template
        name:
          type: string
          description: Template name
        email_subject:
          type: string
          nullable: true
          description: Email subject of the template
        message:
          type: string
          description: Template message
        email_subject_template:
          type: string
          nullable: true
          description: Email subject template of the template
        message_template:
          type: string
          description: Template message template
        ordering:
          type: integer
          description: Ordering of the template
      required:
        - type
        - outreach_type
        - name
        - message
        - message_template
        - ordering
    UsageStatistics:
      type: object
      properties:
        weekly_goals:
          type: object
          properties:
            saved_companies:
              type: integer
            saved_contacts:
              type: integer
            sent_linkedin_invitations:
              type: integer
        challenges:
          type: object
          properties:
            saved_companies:
              type: integer
            saved_contacts:
              type: integer
            sent_linkedin_invitations:
              type: integer
    DateParamValidationFailed:
      type: object
      properties:
        error:
          type: string
          enum:
            - The date parameter is invalid
          description: The date parameter has an invalid format. It should be YYYY-MM-DD.
      required:
        - error
    DataParamIsEmptyError:
      type: object
      properties:
        error:
          type: string
          enum:
            - The date parameter must be supplied and cannot be empty
          description: |
            The date parameter must be supplied and cannot be empty.
      required:
        - error
  responses:
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerError'
    IDValidationFailedError:
      description: Failed to parse ID as UUID
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/IDValidationFailedError'
    UnauthorizedError:
      description: Failed to validate JWT token
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UnauthorizedError'
    JSONValidationFailedError:
      description: Failed to parse request body to JSON schema
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JSONValidationFailedError'
